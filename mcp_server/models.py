# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:03:26+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, confloat, conint, constr


class AccessDenied(RootModel[Any]):
    root: Any


class AssociateAliasRequest(BaseModel):
    pass


class BatchTooLarge(RootModel[Any]):
    root: Any


class CNAMEAlreadyExists(RootModel[Any]):
    root: Any


class CachePolicyAlreadyExists(RootModel[Any]):
    root: Any


class CachePolicyCookieBehavior(Enum):
    none = 'none'
    whitelist = 'whitelist'
    allExcept = 'allExcept'
    all = 'all'


class CachePolicyHeaderBehavior(Enum):
    none = 'none'
    whitelist = 'whitelist'


class CachePolicyInUse(RootModel[Any]):
    root: Any


class CachePolicyQueryStringBehavior(Enum):
    none = 'none'
    whitelist = 'whitelist'
    allExcept = 'allExcept'
    all = 'all'


class CachePolicyType(Enum):
    managed = 'managed'
    custom = 'custom'


class CannotChangeImmutablePublicKeyFields(RootModel[Any]):
    root: Any


class CertificateSource(Enum):
    cloudfront = 'cloudfront'
    iam = 'iam'
    acm = 'acm'


class CloudFrontOriginAccessIdentityAlreadyExists(RootModel[Any]):
    root: Any


class CloudFrontOriginAccessIdentityInUse(RootModel[Any]):
    root: Any


class CommentType(RootModel[SecretStr]):
    root: SecretStr


class ContinuousDeploymentPolicyAlreadyExists(RootModel[Any]):
    root: Any


class ContinuousDeploymentPolicyInUse(RootModel[Any]):
    root: Any


class ContinuousDeploymentPolicyType(Enum):
    SingleWeight = 'SingleWeight'
    SingleHeader = 'SingleHeader'


class DeleteCachePolicyRequest(BaseModel):
    pass


class DeleteCloudFrontOriginAccessIdentityRequest(BaseModel):
    pass


class DeleteContinuousDeploymentPolicyRequest(BaseModel):
    pass


class DeleteDistributionRequest(BaseModel):
    pass


class DeleteFieldLevelEncryptionConfigRequest(BaseModel):
    pass


class DeleteFieldLevelEncryptionProfileRequest(BaseModel):
    pass


class DeleteFunctionRequest(BaseModel):
    pass


class DeleteKeyGroupRequest(BaseModel):
    pass


class DeleteMonitoringSubscriptionRequest(BaseModel):
    pass


class DeleteMonitoringSubscriptionResult(BaseModel):
    pass


class DeleteOriginAccessControlRequest(BaseModel):
    pass


class DeleteOriginRequestPolicyRequest(BaseModel):
    pass


class DeletePublicKeyRequest(BaseModel):
    pass


class DeleteResponseHeadersPolicyRequest(BaseModel):
    pass


class DeleteStreamingDistributionRequest(BaseModel):
    pass


class DescribeFunctionRequest(BaseModel):
    pass


class DistributionAlreadyExists(RootModel[Any]):
    root: Any


class DistributionNotDisabled(RootModel[Any]):
    root: Any


class EventType(Enum):
    viewer_request = 'viewer-request'
    viewer_response = 'viewer-response'
    origin_request = 'origin-request'
    origin_response = 'origin-response'


class FieldLevelEncryptionConfigAlreadyExists(RootModel[Any]):
    root: Any


class FieldLevelEncryptionConfigInUse(RootModel[Any]):
    root: Any


class FieldLevelEncryptionProfileAlreadyExists(RootModel[Any]):
    root: Any


class FieldLevelEncryptionProfileInUse(RootModel[Any]):
    root: Any


class FieldLevelEncryptionProfileSizeExceeded(RootModel[Any]):
    root: Any


class Format(Enum):
    URLEncoded = 'URLEncoded'


class FrameOptionsList(Enum):
    DENY = 'DENY'
    SAMEORIGIN = 'SAMEORIGIN'


class FunctionARN(
    RootModel[
        constr(
            pattern=r'arn:aws:cloudfront::[0-9]{12}:function\/[a-zA-Z0-9-_]{1,64}$',
            max_length=108,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws:cloudfront::[0-9]{12}:function\/[a-zA-Z0-9-_]{1,64}$',
        max_length=108,
    )


class FunctionAlreadyExists(RootModel[Any]):
    root: Any


class FunctionAssociation(BaseModel):
    EventType_1: EventType = Field(..., alias='EventType')
    FunctionARN_1: FunctionARN = Field(..., alias='FunctionARN')


class FunctionAssociationList(RootModel[List[FunctionAssociation]]):
    root: List[FunctionAssociation]


class FunctionBlob(RootModel[SecretStr]):
    root: SecretStr


class FunctionEventObject(RootModel[SecretStr]):
    root: SecretStr


class FunctionInUse(RootModel[Any]):
    root: Any


class FunctionName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-_]{1,64}$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-_]{1,64}$', min_length=1, max_length=64)


class FunctionRuntime(Enum):
    cloudfront_js_1_0 = 'cloudfront-js-1.0'


class FunctionSizeLimitExceeded(RootModel[Any]):
    root: Any


class FunctionStage(Enum):
    DEVELOPMENT = 'DEVELOPMENT'
    LIVE = 'LIVE'


class GeoRestrictionType(Enum):
    blacklist = 'blacklist'
    whitelist = 'whitelist'
    none = 'none'


class GetCachePolicyConfigRequest(BaseModel):
    pass


class GetCachePolicyRequest(BaseModel):
    pass


class GetCloudFrontOriginAccessIdentityConfigRequest(BaseModel):
    pass


class GetCloudFrontOriginAccessIdentityRequest(BaseModel):
    pass


class GetContinuousDeploymentPolicyConfigRequest(BaseModel):
    pass


class GetContinuousDeploymentPolicyRequest(BaseModel):
    pass


class GetDistributionConfigRequest(BaseModel):
    pass


class GetDistributionRequest(BaseModel):
    pass


class GetFieldLevelEncryptionConfigRequest(BaseModel):
    pass


class GetFieldLevelEncryptionProfileConfigRequest(BaseModel):
    pass


class GetFieldLevelEncryptionProfileRequest(BaseModel):
    pass


class GetFieldLevelEncryptionRequest(BaseModel):
    pass


class GetFunctionRequest(BaseModel):
    pass


class GetFunctionResult(BaseModel):
    FunctionCode: Optional[FunctionBlob] = None


class GetInvalidationRequest(BaseModel):
    pass


class GetKeyGroupConfigRequest(BaseModel):
    pass


class GetKeyGroupRequest(BaseModel):
    pass


class GetMonitoringSubscriptionRequest(BaseModel):
    pass


class GetOriginAccessControlConfigRequest(BaseModel):
    pass


class GetOriginAccessControlRequest(BaseModel):
    pass


class GetOriginRequestPolicyConfigRequest(BaseModel):
    pass


class GetOriginRequestPolicyRequest(BaseModel):
    pass


class GetPublicKeyConfigRequest(BaseModel):
    pass


class GetPublicKeyRequest(BaseModel):
    pass


class GetResponseHeadersPolicyConfigRequest(BaseModel):
    pass


class GetResponseHeadersPolicyRequest(BaseModel):
    pass


class GetStreamingDistributionConfigRequest(BaseModel):
    pass


class GetStreamingDistributionRequest(BaseModel):
    pass


class HttpVersion(Enum):
    http1_1 = 'http1.1'
    http2 = 'http2'
    http3 = 'http3'
    http2and3 = 'http2and3'


class ICPRecordalStatus(Enum):
    APPROVED = 'APPROVED'
    SUSPENDED = 'SUSPENDED'
    PENDING = 'PENDING'


class IllegalDelete(RootModel[Any]):
    root: Any


class IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior(RootModel[Any]):
    root: Any


class IllegalOriginAccessConfiguration(RootModel[Any]):
    root: Any


class IllegalUpdate(RootModel[Any]):
    root: Any


class InconsistentQuantities(RootModel[Any]):
    root: Any


class InvalidArgument(RootModel[Any]):
    root: Any


class InvalidDefaultRootObject(RootModel[Any]):
    root: Any


class InvalidDomainNameForOriginAccessControl(RootModel[Any]):
    root: Any


class InvalidErrorCode(RootModel[Any]):
    root: Any


class InvalidForwardCookies(RootModel[Any]):
    root: Any


class InvalidFunctionAssociation(RootModel[Any]):
    root: Any


class InvalidGeoRestrictionParameter(RootModel[Any]):
    root: Any


class InvalidHeadersForS3Origin(RootModel[Any]):
    root: Any


class InvalidIfMatchVersion(RootModel[Any]):
    root: Any


class InvalidLambdaFunctionAssociation(RootModel[Any]):
    root: Any


class InvalidLocationCode(RootModel[Any]):
    root: Any


class InvalidMinimumProtocolVersion(RootModel[Any]):
    root: Any


class InvalidOrigin(RootModel[Any]):
    root: Any


class InvalidOriginAccessControl(RootModel[Any]):
    root: Any


class InvalidOriginAccessIdentity(RootModel[Any]):
    root: Any


class InvalidOriginKeepaliveTimeout(RootModel[Any]):
    root: Any


class InvalidOriginReadTimeout(RootModel[Any]):
    root: Any


class InvalidProtocolSettings(RootModel[Any]):
    root: Any


class InvalidQueryStringParameters(RootModel[Any]):
    root: Any


class InvalidRelativePath(RootModel[Any]):
    root: Any


class InvalidRequiredProtocol(RootModel[Any]):
    root: Any


class InvalidResponseCode(RootModel[Any]):
    root: Any


class InvalidTTLOrder(RootModel[Any]):
    root: Any


class InvalidTagging(RootModel[Any]):
    root: Any


class InvalidViewerCertificate(RootModel[Any]):
    root: Any


class InvalidWebACLId(RootModel[Any]):
    root: Any


class ItemSelection(Enum):
    none = 'none'
    whitelist = 'whitelist'
    all = 'all'


class KeyGroupAlreadyExists(RootModel[Any]):
    root: Any


class LambdaFunctionARN(RootModel[str]):
    root: str


class ListCachePoliciesRequest(BaseModel):
    pass


class ListCloudFrontOriginAccessIdentitiesRequest(BaseModel):
    pass


class ListConflictingAliasesRequest(BaseModel):
    pass


class ListContinuousDeploymentPoliciesRequest(BaseModel):
    pass


class ListDistributionsByCachePolicyIdRequest(BaseModel):
    pass


class ListDistributionsByKeyGroupRequest(BaseModel):
    pass


class ListDistributionsByOriginRequestPolicyIdRequest(BaseModel):
    pass


class ListDistributionsByResponseHeadersPolicyIdRequest(BaseModel):
    pass


class ListDistributionsByWebACLIdRequest(BaseModel):
    pass


class ListDistributionsRequest(BaseModel):
    pass


class ListFieldLevelEncryptionConfigsRequest(BaseModel):
    pass


class ListFieldLevelEncryptionProfilesRequest(BaseModel):
    pass


class ListFunctionsRequest(BaseModel):
    pass


class ListInvalidationsRequest(BaseModel):
    pass


class ListKeyGroupsRequest(BaseModel):
    pass


class ListOriginAccessControlsRequest(BaseModel):
    pass


class ListOriginRequestPoliciesRequest(BaseModel):
    pass


class ListPublicKeysRequest(BaseModel):
    pass


class ListRealtimeLogConfigsRequest(BaseModel):
    pass


class ListResponseHeadersPoliciesRequest(BaseModel):
    pass


class ListStreamingDistributionsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class Method(Enum):
    GET = 'GET'
    HEAD = 'HEAD'
    POST = 'POST'
    PUT = 'PUT'
    PATCH = 'PATCH'
    OPTIONS = 'OPTIONS'
    DELETE = 'DELETE'


class MethodsList(RootModel[List[Method]]):
    root: List[Method]


class MinimumProtocolVersion(Enum):
    SSLv3 = 'SSLv3'
    TLSv1 = 'TLSv1'
    TLSv1_2016 = 'TLSv1_2016'
    TLSv1_1_2016 = 'TLSv1.1_2016'
    TLSv1_2_2018 = 'TLSv1.2_2018'
    TLSv1_2_2019 = 'TLSv1.2_2019'
    TLSv1_2_2021 = 'TLSv1.2_2021'


class MissingBody(RootModel[Any]):
    root: Any


class MonitoringSubscriptionAlreadyExists(RootModel[Any]):
    root: Any


class NoSuchCachePolicy(RootModel[Any]):
    root: Any


class NoSuchCloudFrontOriginAccessIdentity(RootModel[Any]):
    root: Any


class NoSuchContinuousDeploymentPolicy(RootModel[Any]):
    root: Any


class NoSuchDistribution(RootModel[Any]):
    root: Any


class NoSuchFieldLevelEncryptionConfig(RootModel[Any]):
    root: Any


class NoSuchFieldLevelEncryptionProfile(RootModel[Any]):
    root: Any


class NoSuchFunctionExists(RootModel[Any]):
    root: Any


class NoSuchInvalidation(RootModel[Any]):
    root: Any


class NoSuchMonitoringSubscription(RootModel[Any]):
    root: Any


class NoSuchOrigin(RootModel[Any]):
    root: Any


class NoSuchOriginAccessControl(RootModel[Any]):
    root: Any


class NoSuchOriginRequestPolicy(RootModel[Any]):
    root: Any


class NoSuchPublicKey(RootModel[Any]):
    root: Any


class NoSuchRealtimeLogConfig(RootModel[Any]):
    root: Any


class NoSuchResource(RootModel[Any]):
    root: Any


class NoSuchResponseHeadersPolicy(RootModel[Any]):
    root: Any


class NoSuchStreamingDistribution(RootModel[Any]):
    root: Any


class OriginAccessControlAlreadyExists(RootModel[Any]):
    root: Any


class OriginAccessControlInUse(RootModel[Any]):
    root: Any


class OriginAccessControlOriginTypes(Enum):
    s3 = 's3'
    mediastore = 'mediastore'


class OriginAccessControlSigningBehaviors(Enum):
    never = 'never'
    always = 'always'
    no_override = 'no-override'


class OriginAccessControlSigningProtocols(Enum):
    sigv4 = 'sigv4'


class OriginProtocolPolicy(Enum):
    http_only = 'http-only'
    match_viewer = 'match-viewer'
    https_only = 'https-only'


class OriginRequestPolicyAlreadyExists(RootModel[Any]):
    root: Any


class OriginRequestPolicyCookieBehavior(Enum):
    none = 'none'
    whitelist = 'whitelist'
    all = 'all'
    allExcept = 'allExcept'


class OriginRequestPolicyHeaderBehavior(Enum):
    none = 'none'
    whitelist = 'whitelist'
    allViewer = 'allViewer'
    allViewerAndWhitelistCloudFront = 'allViewerAndWhitelistCloudFront'
    allExcept = 'allExcept'


class OriginRequestPolicyInUse(RootModel[Any]):
    root: Any


class OriginRequestPolicyQueryStringBehavior(Enum):
    none = 'none'
    whitelist = 'whitelist'
    all = 'all'
    allExcept = 'allExcept'


class OriginRequestPolicyType(Enum):
    managed = 'managed'
    custom = 'custom'


class OriginShieldRegion(
    RootModel[constr(pattern=r'[a-z]{2}-[a-z]+-\d', min_length=1, max_length=32)]
):
    root: constr(pattern=r'[a-z]{2}-[a-z]+-\d', min_length=1, max_length=32)


class PreconditionFailed(RootModel[Any]):
    root: Any


class PriceClass(Enum):
    PriceClass_100 = 'PriceClass_100'
    PriceClass_200 = 'PriceClass_200'
    PriceClass_All = 'PriceClass_All'


class PublicKeyAlreadyExists(RootModel[Any]):
    root: Any


class PublicKeyInUse(RootModel[Any]):
    root: Any


class PublishFunctionRequest(BaseModel):
    pass


class QueryArgProfileEmpty(RootModel[Any]):
    root: Any


class RealtimeLogConfigAlreadyExists(RootModel[Any]):
    root: Any


class RealtimeLogConfigInUse(RootModel[Any]):
    root: Any


class RealtimeLogConfigOwnerMismatch(RootModel[Any]):
    root: Any


class RealtimeMetricsSubscriptionStatus(Enum):
    Enabled = 'Enabled'
    Disabled = 'Disabled'


class ReferrerPolicyList(Enum):
    no_referrer = 'no-referrer'
    no_referrer_when_downgrade = 'no-referrer-when-downgrade'
    origin = 'origin'
    origin_when_cross_origin = 'origin-when-cross-origin'
    same_origin = 'same-origin'
    strict_origin = 'strict-origin'
    strict_origin_when_cross_origin = 'strict-origin-when-cross-origin'
    unsafe_url = 'unsafe-url'


class ResourceARN(RootModel[constr(pattern=r'arn:aws(-cn)?:cloudfront::[0-9]+:.*')]):
    root: constr(pattern=r'arn:aws(-cn)?:cloudfront::[0-9]+:.*')


class ResourceInUse(RootModel[Any]):
    root: Any


class ResponseHeadersPolicyAccessControlAllowMethodsValues(Enum):
    GET = 'GET'
    POST = 'POST'
    OPTIONS = 'OPTIONS'
    PUT = 'PUT'
    DELETE = 'DELETE'
    PATCH = 'PATCH'
    HEAD = 'HEAD'
    ALL = 'ALL'


class ResponseHeadersPolicyAlreadyExists(RootModel[Any]):
    root: Any


class ResponseHeadersPolicyInUse(RootModel[Any]):
    root: Any


class ResponseHeadersPolicyType(Enum):
    managed = 'managed'
    custom = 'custom'


class SSLSupportMethod(Enum):
    sni_only = 'sni-only'
    vip = 'vip'
    static_ip = 'static-ip'


class SamplingRate(RootModel[confloat(ge=0.0, le=100.0)]):
    root: confloat(ge=0.0, le=100.0)


class SslProtocol(Enum):
    SSLv3 = 'SSLv3'
    TLSv1 = 'TLSv1'
    TLSv1_1 = 'TLSv1.1'
    TLSv1_2 = 'TLSv1.2'


class SslProtocolsList(RootModel[List[SslProtocol]]):
    root: List[SslProtocol]


class StagingDistributionInUse(RootModel[Any]):
    root: Any


class StreamingDistributionAlreadyExists(RootModel[Any]):
    root: Any


class StreamingDistributionNotDisabled(RootModel[Any]):
    root: Any


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    ) = Field(
        ...,
        description='<p>A string that contains <code>Tag</code> key.</p> <p>The string length should be between 1 and 128 characters. Valid characters include <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, space, and the special characters <code>_ - . : / = + @</code>.</p>',
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagKeys(BaseModel):
    Items: Optional[TagKeyList] = None


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class TestFunctionFailed(RootModel[Any]):
    root: Any


class TestFunctionRequest(BaseModel):
    EventObject: FunctionEventObject
    Stage: Optional[FunctionStage] = None


class TooLongCSPInResponseHeadersPolicy(RootModel[Any]):
    root: Any


class TooManyCacheBehaviors(RootModel[Any]):
    root: Any


class TooManyCachePolicies(RootModel[Any]):
    root: Any


class TooManyCertificates(RootModel[Any]):
    root: Any


class TooManyCloudFrontOriginAccessIdentities(RootModel[Any]):
    root: Any


class TooManyContinuousDeploymentPolicies(RootModel[Any]):
    root: Any


class TooManyCookieNamesInWhiteList(RootModel[Any]):
    root: Any


class TooManyCookiesInCachePolicy(RootModel[Any]):
    root: Any


class TooManyCookiesInOriginRequestPolicy(RootModel[Any]):
    root: Any


class TooManyCustomHeadersInResponseHeadersPolicy(RootModel[Any]):
    root: Any


class TooManyDistributionCNAMEs(RootModel[Any]):
    root: Any


class TooManyDistributions(RootModel[Any]):
    root: Any


class TooManyDistributionsAssociatedToCachePolicy(RootModel[Any]):
    root: Any


class TooManyDistributionsAssociatedToFieldLevelEncryptionConfig(RootModel[Any]):
    root: Any


class TooManyDistributionsAssociatedToKeyGroup(RootModel[Any]):
    root: Any


class TooManyDistributionsAssociatedToOriginAccessControl(RootModel[Any]):
    root: Any


class TooManyDistributionsAssociatedToOriginRequestPolicy(RootModel[Any]):
    root: Any


class TooManyDistributionsAssociatedToResponseHeadersPolicy(RootModel[Any]):
    root: Any


class TooManyDistributionsWithFunctionAssociations(RootModel[Any]):
    root: Any


class TooManyDistributionsWithLambdaAssociations(RootModel[Any]):
    root: Any


class TooManyDistributionsWithSingleFunctionARN(RootModel[Any]):
    root: Any


class TooManyFieldLevelEncryptionConfigs(RootModel[Any]):
    root: Any


class TooManyFieldLevelEncryptionContentTypeProfiles(RootModel[Any]):
    root: Any


class TooManyFieldLevelEncryptionEncryptionEntities(RootModel[Any]):
    root: Any


class TooManyFieldLevelEncryptionFieldPatterns(RootModel[Any]):
    root: Any


class TooManyFieldLevelEncryptionProfiles(RootModel[Any]):
    root: Any


class TooManyFieldLevelEncryptionQueryArgProfiles(RootModel[Any]):
    root: Any


class TooManyFunctionAssociations(RootModel[Any]):
    root: Any


class TooManyFunctions(RootModel[Any]):
    root: Any


class TooManyHeadersInCachePolicy(RootModel[Any]):
    root: Any


class TooManyHeadersInForwardedValues(RootModel[Any]):
    root: Any


class TooManyHeadersInOriginRequestPolicy(RootModel[Any]):
    root: Any


class TooManyInvalidationsInProgress(RootModel[Any]):
    root: Any


class TooManyKeyGroups(RootModel[Any]):
    root: Any


class TooManyKeyGroupsAssociatedToDistribution(RootModel[Any]):
    root: Any


class TooManyLambdaFunctionAssociations(RootModel[Any]):
    root: Any


class TooManyOriginAccessControls(RootModel[Any]):
    root: Any


class TooManyOriginCustomHeaders(RootModel[Any]):
    root: Any


class TooManyOriginGroupsPerDistribution(RootModel[Any]):
    root: Any


class TooManyOriginRequestPolicies(RootModel[Any]):
    root: Any


class TooManyOrigins(RootModel[Any]):
    root: Any


class TooManyPublicKeys(RootModel[Any]):
    root: Any


class TooManyPublicKeysInKeyGroup(RootModel[Any]):
    root: Any


class TooManyQueryStringParameters(RootModel[Any]):
    root: Any


class TooManyQueryStringsInCachePolicy(RootModel[Any]):
    root: Any


class TooManyQueryStringsInOriginRequestPolicy(RootModel[Any]):
    root: Any


class TooManyRealtimeLogConfigs(RootModel[Any]):
    root: Any


class TooManyRemoveHeadersInResponseHeadersPolicy(RootModel[Any]):
    root: Any


class TooManyResponseHeadersPolicies(RootModel[Any]):
    root: Any


class TooManyStreamingDistributionCNAMEs(RootModel[Any]):
    root: Any


class TooManyStreamingDistributions(RootModel[Any]):
    root: Any


class TooManyTrustedSigners(RootModel[Any]):
    root: Any


class TrustedKeyGroupDoesNotExist(RootModel[Any]):
    root: Any


class TrustedSignerDoesNotExist(RootModel[Any]):
    root: Any


class UnsupportedOperation(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    TagKeys_1: TagKeys = Field(..., alias='TagKeys')


class UpdateDistributionWithStagingConfigRequest(BaseModel):
    pass


class ViewerProtocolPolicy(Enum):
    allow_all = 'allow-all'
    https_only = 'https-only'
    redirect_to_https = 'redirect-to-https'


class AliasString(RootModel[constr(max_length=253)]):
    root: constr(max_length=253)


class Boolean(RootModel[bool]):
    root: bool


class DistributionIdString(RootModel[constr(max_length=25)]):
    root: constr(max_length=25)


class Float(RootModel[float]):
    root: float


class Integer(RootModel[int]):
    root: int


class ListConflictingAliasesMaxItemsInteger(RootModel[conint(le=100)]):
    root: conint(le=100)


class Long(RootModel[int]):
    root: int


class SensitiveStringType(RootModel[SecretStr]):
    root: SecretStr


class String(RootModel[str]):
    root: str


class Timestamp(RootModel[datetime]):
    root: datetime


class Type(Enum):
    managed = 'managed'
    custom = 'custom'


class Field20200531DeleteRealtimeLogConfigPostRequest(BaseModel):
    ARN: Optional[str] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the real-time log configuration to delete.',
    )
    Name: Optional[str] = Field(
        None, description='The name of the real-time log configuration to delete.'
    )


class WithTags(Enum):
    boolean_True = True


class Field20200531DistributionPrimaryDistributionIdCopyPostRequest(BaseModel):
    CallerReference: str = Field(
        ...,
        description='A value that uniquely identifies a request to create a resource. This helps to prevent CloudFront from creating a duplicate resource if you accidentally resubmit an identical request.',
    )


class Field20200531DistributionsByRealtimeLogConfigPostRequest(BaseModel):
    Marker: Optional[str] = Field(
        None,
        description="Use this field when paginating results to indicate where to begin in your list of distributions. The response includes distributions in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.",
    )
    MaxItems: Optional[str] = Field(
        None,
        description='The maximum number of distributions that you want in the response.',
    )
    RealtimeLogConfigArn: Optional[str] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the real-time log configuration whose associated distributions you want to list.',
    )
    RealtimeLogConfigName: Optional[str] = Field(
        None,
        description='The name of the real-time log configuration whose associated distributions you want to list.',
    )


class Stage(Enum):
    DEVELOPMENT = 'DEVELOPMENT'
    LIVE = 'LIVE'


class FunctionConfig1(BaseModel):
    Comment: Optional[String] = None
    Runtime: Optional[FunctionRuntime] = None


class Field20200531FunctionPostRequest(BaseModel):
    FunctionCode: SecretStr = Field(
        ...,
        description='The function code. For more information about writing a CloudFront function, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/writing-function-code.html">Writing function code for CloudFront Functions</a> in the <i>Amazon CloudFront Developer Guide</i>.',
    )
    FunctionConfig: FunctionConfig1 = Field(
        ...,
        description='Contains configuration information about a CloudFront function.',
    )
    Name: constr(pattern=r'^[a-zA-Z0-9-_]{1,64}$', min_length=1, max_length=64) = Field(
        ..., description='A name to identify the function.'
    )


class Field20200531FunctionNameIfMatchPutRequest(BaseModel):
    FunctionCode: SecretStr = Field(
        ...,
        description='The function code. For more information about writing a CloudFront function, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/writing-function-code.html">Writing function code for CloudFront Functions</a> in the <i>Amazon CloudFront Developer Guide</i>.',
    )
    FunctionConfig: FunctionConfig1 = Field(
        ...,
        description='Contains configuration information about a CloudFront function.',
    )


class Field20200531FunctionNameTestIfMatchPostRequest(BaseModel):
    EventObject: SecretStr = Field(
        ...,
        description='The event object to test the function with. For more information about the structure of the event object, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/managing-functions.html#test-function">Testing functions</a> in the <i>Amazon CloudFront Developer Guide</i>.',
    )
    Stage_1: Optional[Stage] = Field(
        None,
        alias='Stage',
        description='The stage of the function that you are testing, either <code>DEVELOPMENT</code> or <code>LIVE</code>.',
    )


class Field20200531GetRealtimeLogConfigPostRequest(BaseModel):
    ARN: Optional[str] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the real-time log configuration to get.',
    )
    Name: Optional[str] = Field(
        None, description='The name of the real-time log configuration to get.'
    )


class OriginAccessControlConfig1(BaseModel):
    Description: Optional[String] = None
    Name: Optional[String] = None
    OriginAccessControlOriginType: Optional[OriginAccessControlOriginTypes] = None
    SigningBehavior: Optional[OriginAccessControlSigningBehaviors] = None
    SigningProtocol: Optional[OriginAccessControlSigningProtocols] = None


class Field20200531OriginAccessControlPostRequest(BaseModel):
    OriginAccessControlConfig: OriginAccessControlConfig1 = Field(
        ..., description='A CloudFront origin access control configuration.'
    )


class Field20200531OriginAccessControlIdConfigPutRequest(BaseModel):
    OriginAccessControlConfig: OriginAccessControlConfig1 = Field(
        ..., description='A CloudFront origin access control configuration.'
    )


class CloudFrontOriginAccessIdentityConfig1(BaseModel):
    CallerReference: Optional[String] = None
    Comment: Optional[String] = None


class Field20200531OriginAccessIdentityCloudfrontPostRequest(BaseModel):
    CloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig1 = Field(
        ...,
        description='Origin access identity configuration. Send a <code>GET</code> request to the <code>/<i>CloudFront API version</i>/CloudFront/identity ID/config</code> resource.',
    )


class Field20200531OriginAccessIdentityCloudfrontIdConfigPutRequest(BaseModel):
    CloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig1 = Field(
        ...,
        description='Origin access identity configuration. Send a <code>GET</code> request to the <code>/<i>CloudFront API version</i>/CloudFront/identity ID/config</code> resource.',
    )


class PublicKeyConfig1(BaseModel):
    CallerReference: Optional[String] = None
    Comment: Optional[String] = None
    EncodedKey: Optional[String] = None
    Name: Optional[String] = None


class Field20200531PublicKeyPostRequest(BaseModel):
    PublicKeyConfig: PublicKeyConfig1 = Field(
        ...,
        description='Configuration information about a public key that you can use with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">signed URLs and signed cookies</a>, or with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html">field-level encryption</a>.',
    )


class Field20200531PublicKeyIdConfigPutRequest(BaseModel):
    PublicKeyConfig: PublicKeyConfig1 = Field(
        ...,
        description='Configuration information about a public key that you can use with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">signed URLs and signed cookies</a>, or with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html">field-level encryption</a>.',
    )


class Operation(Enum):
    Tag = 'Tag'


class Operation2(Enum):
    Untag = 'Untag'


class Field20200531TaggingOperationUntagResourcePostRequest(BaseModel):
    TagKeys_1: TagKeys = Field(
        ...,
        alias='TagKeys',
        description='A complex type that contains zero or more <code>Tag</code> elements.',
    )


class AccessControlAllowHeadersList(RootModel[List[String]]):
    root: List[String]


class AccessControlAllowMethodsList(
    RootModel[List[ResponseHeadersPolicyAccessControlAllowMethodsValues]]
):
    root: List[ResponseHeadersPolicyAccessControlAllowMethodsValues]


class AccessControlAllowOriginsList(RootModel[List[String]]):
    root: List[String]


class AccessControlExposeHeadersList(RootModel[List[String]]):
    root: List[String]


class AliasICPRecordal(BaseModel):
    CNAME: Optional[String] = None
    ICPRecordalStatus_1: Optional[ICPRecordalStatus] = Field(
        None, alias='ICPRecordalStatus'
    )


class AliasICPRecordals(RootModel[List[AliasICPRecordal]]):
    root: List[AliasICPRecordal]


class AliasList(RootModel[List[String]]):
    root: List[String]


class Aliases(BaseModel):
    Items: Optional[AliasList] = None
    Quantity: Integer


class AwsAccountNumberList(RootModel[List[String]]):
    root: List[String]


class CachedMethods(BaseModel):
    Items: MethodsList
    Quantity: Integer


class CloudFrontOriginAccessIdentityConfig(BaseModel):
    CallerReference: String
    Comment: String


class CloudFrontOriginAccessIdentitySummary(BaseModel):
    Comment: String
    Id: String
    S3CanonicalUserId: String


class CloudFrontOriginAccessIdentitySummaryList(
    RootModel[List[CloudFrontOriginAccessIdentitySummary]]
):
    root: List[CloudFrontOriginAccessIdentitySummary]


class ConflictingAlias(BaseModel):
    AccountId: Optional[String] = None
    Alias: Optional[String] = None
    DistributionId: Optional[String] = None


class ConflictingAliases(RootModel[List[ConflictingAlias]]):
    root: List[ConflictingAlias]


class ConflictingAliasesList(BaseModel):
    Items: Optional[ConflictingAliases] = None
    MaxItems: Optional[Integer] = None
    NextMarker: Optional[String] = None
    Quantity: Optional[Integer] = None


class ContentTypeProfile(BaseModel):
    ContentType: String
    Format_1: Format = Field(..., alias='Format')
    ProfileId: Optional[String] = None


class ContentTypeProfileList(RootModel[List[ContentTypeProfile]]):
    root: List[ContentTypeProfile]


class ContentTypeProfiles(BaseModel):
    Items: Optional[ContentTypeProfileList] = None
    Quantity: Integer


class ContinuousDeploymentSingleHeaderConfig(BaseModel):
    Header: String
    Value: String


class CookieNameList(RootModel[List[String]]):
    root: List[String]


class CookieNames(BaseModel):
    Items: Optional[CookieNameList] = None
    Quantity: Integer


class CookiePreference(BaseModel):
    Forward: ItemSelection
    WhitelistedNames: Optional[CookieNames] = None


class CopyDistributionRequest(BaseModel):
    CallerReference: String


class CreateCloudFrontOriginAccessIdentityRequest(BaseModel):
    CloudFrontOriginAccessIdentityConfig_1: CloudFrontOriginAccessIdentityConfig = (
        Field(..., alias='CloudFrontOriginAccessIdentityConfig')
    )


class CustomErrorResponse(BaseModel):
    ErrorCachingMinTTL: Optional[Long] = None
    ErrorCode: Integer
    ResponseCode: Optional[String] = None
    ResponsePagePath: Optional[String] = None


class CustomErrorResponseList(RootModel[List[CustomErrorResponse]]):
    root: List[CustomErrorResponse]


class CustomErrorResponses(BaseModel):
    Items: Optional[CustomErrorResponseList] = None
    Quantity: Integer


class DeleteRealtimeLogConfigRequest(BaseModel):
    ARN: Optional[String] = None
    Name: Optional[String] = None


class DistributionIdListSummary(RootModel[List[String]]):
    root: List[String]


class FieldList(RootModel[List[String]]):
    root: List[String]


class FieldPatternList(RootModel[List[String]]):
    root: List[String]


class FieldPatterns(BaseModel):
    Items: Optional[FieldPatternList] = None
    Quantity: Integer


class FunctionAssociations(BaseModel):
    Items: Optional[FunctionAssociationList] = None
    Quantity: Integer


class FunctionConfig(BaseModel):
    Comment: String
    Runtime: FunctionRuntime


class FunctionExecutionLogList(RootModel[List[String]]):
    root: List[String]


class FunctionMetadata(BaseModel):
    CreatedTime: Optional[Timestamp] = None
    FunctionARN: String
    LastModifiedTime: Timestamp
    Stage: Optional[FunctionStage] = None


class FunctionSummary(BaseModel):
    FunctionConfig_1: FunctionConfig = Field(..., alias='FunctionConfig')
    FunctionMetadata_1: FunctionMetadata = Field(..., alias='FunctionMetadata')
    Name: FunctionName
    Status: Optional[String] = None


class FunctionSummaryList(RootModel[List[FunctionSummary]]):
    root: List[FunctionSummary]


class GetCloudFrontOriginAccessIdentityConfigResult(BaseModel):
    CloudFrontOriginAccessIdentityConfig_1: Optional[
        CloudFrontOriginAccessIdentityConfig
    ] = Field(None, alias='CloudFrontOriginAccessIdentityConfig')


class GetRealtimeLogConfigRequest(BaseModel):
    ARN: Optional[String] = None
    Name: Optional[String] = None


class HeaderList(RootModel[List[String]]):
    root: List[String]


class Headers(BaseModel):
    Items: Optional[HeaderList] = None
    Quantity: Integer


class InvalidationSummary(BaseModel):
    CreateTime: Timestamp
    Id: String
    Status: String


class InvalidationSummaryList(RootModel[List[InvalidationSummary]]):
    root: List[InvalidationSummary]


class KeyPairIdList(RootModel[List[String]]):
    root: List[String]


class KeyPairIds(BaseModel):
    Items: Optional[KeyPairIdList] = None
    Quantity: Integer


class KinesisStreamConfig(BaseModel):
    RoleARN: String
    StreamARN: String


class LambdaFunctionAssociation(BaseModel):
    EventType_1: EventType = Field(..., alias='EventType')
    IncludeBody: Optional[Boolean] = None
    LambdaFunctionARN_1: LambdaFunctionARN = Field(..., alias='LambdaFunctionARN')


class LambdaFunctionAssociationList(RootModel[List[LambdaFunctionAssociation]]):
    root: List[LambdaFunctionAssociation]


class LambdaFunctionAssociations(BaseModel):
    Items: Optional[LambdaFunctionAssociationList] = None
    Quantity: Integer


class ListConflictingAliasesResult(BaseModel):
    ConflictingAliasesList_1: Optional[ConflictingAliasesList] = Field(
        None, alias='ConflictingAliasesList'
    )


class ListDistributionsByRealtimeLogConfigRequest(BaseModel):
    Marker: Optional[String] = None
    MaxItems: Optional[String] = None
    RealtimeLogConfigArn: Optional[String] = None
    RealtimeLogConfigName: Optional[String] = None


class LocationList(RootModel[List[String]]):
    root: List[String]


class LoggingConfig(BaseModel):
    Bucket: String
    Enabled: Boolean
    IncludeCookies: Boolean
    Prefix: String


class OriginAccessControlConfig(BaseModel):
    Description: Optional[String] = None
    Name: String
    OriginAccessControlOriginType: OriginAccessControlOriginTypes
    SigningBehavior: OriginAccessControlSigningBehaviors
    SigningProtocol: OriginAccessControlSigningProtocols


class OriginAccessControlSummary(BaseModel):
    Description: String
    Id: String
    Name: String
    OriginAccessControlOriginType: OriginAccessControlOriginTypes
    SigningBehavior: OriginAccessControlSigningBehaviors
    SigningProtocol: OriginAccessControlSigningProtocols


class OriginAccessControlSummaryList(RootModel[List[OriginAccessControlSummary]]):
    root: List[OriginAccessControlSummary]


class OriginCustomHeader(BaseModel):
    HeaderName: String
    HeaderValue: SensitiveStringType


class OriginCustomHeadersList(RootModel[List[OriginCustomHeader]]):
    root: List[OriginCustomHeader]


class OriginGroupMember(BaseModel):
    OriginId: String


class OriginGroupMemberList(RootModel[List[OriginGroupMember]]):
    root: List[OriginGroupMember] = Field(
        ...,
        description='List of origins in an origin group.',
        max_length=2,
        min_length=2,
    )


class OriginGroupMembers(BaseModel):
    Items: OriginGroupMemberList
    Quantity: Integer


class OriginRequestPolicyCookiesConfig(BaseModel):
    CookieBehavior: OriginRequestPolicyCookieBehavior
    Cookies: Optional[CookieNames] = None


class OriginRequestPolicyHeadersConfig(BaseModel):
    HeaderBehavior: OriginRequestPolicyHeaderBehavior
    Headers_1: Optional[Headers] = Field(None, alias='Headers')


class OriginShield(BaseModel):
    Enabled: Boolean
    OriginShieldRegion_1: Optional[OriginShieldRegion] = Field(
        None, alias='OriginShieldRegion'
    )


class OriginSslProtocols(BaseModel):
    Items: SslProtocolsList
    Quantity: Integer


class PathList(RootModel[List[String]]):
    root: List[String]


class Paths(BaseModel):
    Items: Optional[PathList] = None
    Quantity: Integer


class PublicKeyConfig(BaseModel):
    CallerReference: String
    Comment: Optional[String] = None
    EncodedKey: String
    Name: String


class PublicKeyIdList(RootModel[List[String]]):
    root: List[String]


class PublicKeySummary(BaseModel):
    Comment: Optional[String] = None
    CreatedTime: Timestamp
    EncodedKey: String
    Id: String
    Name: String


class PublicKeySummaryList(RootModel[List[PublicKeySummary]]):
    root: List[PublicKeySummary]


class PublishFunctionResult(BaseModel):
    FunctionSummary_1: Optional[FunctionSummary] = Field(None, alias='FunctionSummary')


class QueryArgProfile(BaseModel):
    ProfileId: String
    QueryArg: String


class QueryArgProfileList(RootModel[List[QueryArgProfile]]):
    root: List[QueryArgProfile]


class QueryArgProfiles(BaseModel):
    Items: Optional[QueryArgProfileList] = None
    Quantity: Integer


class QueryStringCacheKeysList(RootModel[List[String]]):
    root: List[String]


class QueryStringNamesList(RootModel[List[String]]):
    root: List[String]


class RealtimeMetricsSubscriptionConfig(BaseModel):
    RealtimeMetricsSubscriptionStatus_1: RealtimeMetricsSubscriptionStatus = Field(
        ..., alias='RealtimeMetricsSubscriptionStatus'
    )


class ResponseHeadersPolicyAccessControlAllowHeaders(BaseModel):
    Items: AccessControlAllowHeadersList
    Quantity: Integer


class ResponseHeadersPolicyAccessControlAllowMethods(BaseModel):
    Items: AccessControlAllowMethodsList
    Quantity: Integer


class ResponseHeadersPolicyAccessControlAllowOrigins(BaseModel):
    Items: AccessControlAllowOriginsList
    Quantity: Integer


class ResponseHeadersPolicyAccessControlExposeHeaders(BaseModel):
    Items: Optional[AccessControlExposeHeadersList] = None
    Quantity: Integer


class ResponseHeadersPolicyContentSecurityPolicy(BaseModel):
    ContentSecurityPolicy: String
    Override: Boolean


class ResponseHeadersPolicyContentTypeOptions(BaseModel):
    Override: Boolean


class ResponseHeadersPolicyCorsConfig(BaseModel):
    AccessControlAllowCredentials: Boolean
    AccessControlAllowHeaders: ResponseHeadersPolicyAccessControlAllowHeaders
    AccessControlAllowMethods: ResponseHeadersPolicyAccessControlAllowMethods
    AccessControlAllowOrigins: ResponseHeadersPolicyAccessControlAllowOrigins
    AccessControlExposeHeaders: Optional[
        ResponseHeadersPolicyAccessControlExposeHeaders
    ] = None
    AccessControlMaxAgeSec: Optional[Integer] = None
    OriginOverride: Boolean


class ResponseHeadersPolicyCustomHeader(BaseModel):
    Header: String
    Override: Boolean
    Value: String


class ResponseHeadersPolicyCustomHeaderList(
    RootModel[List[ResponseHeadersPolicyCustomHeader]]
):
    root: List[ResponseHeadersPolicyCustomHeader]


class ResponseHeadersPolicyCustomHeadersConfig(BaseModel):
    Items: Optional[ResponseHeadersPolicyCustomHeaderList] = None
    Quantity: Integer


class ResponseHeadersPolicyFrameOptions(BaseModel):
    FrameOption: FrameOptionsList
    Override: Boolean


class ResponseHeadersPolicyReferrerPolicy(BaseModel):
    Override: Boolean
    ReferrerPolicy: ReferrerPolicyList


class ResponseHeadersPolicyRemoveHeader(BaseModel):
    Header: String


class ResponseHeadersPolicyRemoveHeaderList(
    RootModel[List[ResponseHeadersPolicyRemoveHeader]]
):
    root: List[ResponseHeadersPolicyRemoveHeader]


class ResponseHeadersPolicyRemoveHeadersConfig(BaseModel):
    Items: Optional[ResponseHeadersPolicyRemoveHeaderList] = None
    Quantity: Integer


class ResponseHeadersPolicyServerTimingHeadersConfig(BaseModel):
    Enabled: Boolean
    SamplingRate_1: Optional[SamplingRate] = Field(None, alias='SamplingRate')


class ResponseHeadersPolicyStrictTransportSecurity(BaseModel):
    AccessControlMaxAgeSec: Integer
    IncludeSubdomains: Optional[Boolean] = None
    Override: Boolean
    Preload: Optional[Boolean] = None


class ResponseHeadersPolicyXSSProtection(BaseModel):
    ModeBlock: Optional[Boolean] = None
    Override: Boolean
    Protection: Boolean
    ReportUri: Optional[String] = None


class S3Origin(BaseModel):
    DomainName: String
    OriginAccessIdentity: String


class S3OriginConfig(BaseModel):
    OriginAccessIdentity: String


class SessionStickinessConfig(BaseModel):
    IdleTTL: Integer
    MaximumTTL: Integer


class Signer(BaseModel):
    AwsAccountNumber: Optional[String] = None
    KeyPairIds_1: Optional[KeyPairIds] = Field(None, alias='KeyPairIds')


class SignerList(RootModel[List[Signer]]):
    root: List[Signer]


class StagingDistributionDnsNameList(RootModel[List[String]]):
    root: List[String]


class StagingDistributionDnsNames(BaseModel):
    Items: Optional[StagingDistributionDnsNameList] = None
    Quantity: Integer


class StatusCodeList(RootModel[List[Integer]]):
    root: List[Integer] = Field(
        ..., description='List of status codes for origin failover.', min_length=1
    )


class StatusCodes(BaseModel):
    Items: StatusCodeList
    Quantity: Integer


class StreamingLoggingConfig(BaseModel):
    Bucket: String
    Enabled: Boolean
    Prefix: String


class Tag(BaseModel):
    Key: TagKey
    Value: Optional[TagValue] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class Tags(BaseModel):
    Items: Optional[TagList] = None


class TestResult(BaseModel):
    ComputeUtilization: Optional[String] = None
    FunctionErrorMessage: Optional[SensitiveStringType] = None
    FunctionExecutionLogs: Optional[FunctionExecutionLogList] = None
    FunctionOutput: Optional[SensitiveStringType] = None
    FunctionSummary_1: Optional[FunctionSummary] = Field(None, alias='FunctionSummary')


class TrustedKeyGroupIdList(RootModel[List[String]]):
    root: List[String]


class TrustedKeyGroups(BaseModel):
    Enabled: Boolean
    Items: Optional[TrustedKeyGroupIdList] = None
    Quantity: Integer


class TrustedSigners(BaseModel):
    Enabled: Boolean
    Items: Optional[AwsAccountNumberList] = None
    Quantity: Integer


class UpdateCloudFrontOriginAccessIdentityRequest(BaseModel):
    CloudFrontOriginAccessIdentityConfig_1: CloudFrontOriginAccessIdentityConfig = (
        Field(..., alias='CloudFrontOriginAccessIdentityConfig')
    )


class UpdateFunctionRequest(BaseModel):
    FunctionCode: FunctionBlob
    FunctionConfig_1: FunctionConfig = Field(..., alias='FunctionConfig')


class UpdateFunctionResult(BaseModel):
    FunctionSummary_1: Optional[FunctionSummary] = Field(None, alias='FunctionSummary')


class UpdateOriginAccessControlRequest(BaseModel):
    OriginAccessControlConfig_1: OriginAccessControlConfig = Field(
        ..., alias='OriginAccessControlConfig'
    )


class UpdatePublicKeyRequest(BaseModel):
    PublicKeyConfig_1: PublicKeyConfig = Field(..., alias='PublicKeyConfig')


class ViewerCertificate(BaseModel):
    ACMCertificateArn: Optional[String] = None
    Certificate: Optional[String] = None
    CertificateSource_1: Optional[CertificateSource] = Field(
        None, alias='CertificateSource'
    )
    CloudFrontDefaultCertificate: Optional[Boolean] = None
    IAMCertificateId: Optional[String] = None
    MinimumProtocolVersion_1: Optional[MinimumProtocolVersion] = Field(
        None, alias='MinimumProtocolVersion'
    )
    SSLSupportMethod_1: Optional[SSLSupportMethod] = Field(
        None, alias='SSLSupportMethod'
    )


class InvalidationBatch1(BaseModel):
    CallerReference: Optional[String] = None
    Paths_1: Optional[Paths] = Field(None, alias='Paths')


class Field20200531DistributionDistributionIdInvalidationPostRequest(BaseModel):
    InvalidationBatch: InvalidationBatch1 = Field(
        ..., description='An invalidation batch.'
    )


class MonitoringSubscription(BaseModel):
    RealtimeMetricsSubscriptionConfig_1: Optional[RealtimeMetricsSubscriptionConfig] = (
        Field(None, alias='RealtimeMetricsSubscriptionConfig')
    )


class Field20200531DistributionsDistributionIdMonitoringSubscriptionPostRequest(
    BaseModel
):
    MonitoringSubscription_1: MonitoringSubscription = Field(
        ...,
        alias='MonitoringSubscription',
        description='A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.',
    )


class KeyGroupConfig1(BaseModel):
    Comment: Optional[String] = None
    Items: Optional[PublicKeyIdList] = None
    Name: Optional[String] = None


class Field20200531KeyGroupPostRequest(BaseModel):
    KeyGroupConfig: KeyGroupConfig1 = Field(
        ...,
        description='<p>A key group configuration.</p> <p>A key group contains a list of public keys that you can use with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">CloudFront signed URLs and signed cookies</a>.</p>',
    )


class Field20200531KeyGroupIdPutRequest(BaseModel):
    KeyGroupConfig: KeyGroupConfig1 = Field(
        ...,
        description='<p>A key group configuration.</p> <p>A key group contains a list of public keys that you can use with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">CloudFront signed URLs and signed cookies</a>.</p>',
    )


class StreamingDistributionConfig1(BaseModel):
    Aliases_1: Optional[Aliases] = Field(None, alias='Aliases')
    CallerReference: Optional[String] = None
    Comment: Optional[String] = None
    Enabled: Optional[Boolean] = None
    Logging: Optional[StreamingLoggingConfig] = None
    PriceClass_1: Optional[PriceClass] = Field(None, alias='PriceClass')
    S3Origin_1: Optional[S3Origin] = Field(None, alias='S3Origin')
    TrustedSigners_1: Optional[TrustedSigners] = Field(None, alias='TrustedSigners')


class Field20200531StreamingDistributionPostRequest(BaseModel):
    StreamingDistributionConfig: StreamingDistributionConfig1 = Field(
        ..., description="The RTMP distribution's configuration information."
    )


class Field20200531StreamingDistributionIdConfigPutRequest(BaseModel):
    StreamingDistributionConfig: StreamingDistributionConfig1 = Field(
        ..., description="The RTMP distribution's configuration information."
    )


class Field20200531TaggingOperationTagResourcePostRequest(BaseModel):
    Tags_1: Tags = Field(
        ...,
        alias='Tags',
        description='A complex type that contains zero or more <code>Tag</code> elements.',
    )


class ActiveTrustedSigners(BaseModel):
    Enabled: Boolean
    Items: Optional[SignerList] = None
    Quantity: Integer


class AllowedMethods(BaseModel):
    CachedMethods_1: Optional[CachedMethods] = Field(None, alias='CachedMethods')
    Items: MethodsList
    Quantity: Integer


class CachePolicyCookiesConfig(BaseModel):
    CookieBehavior: CachePolicyCookieBehavior
    Cookies: Optional[CookieNames] = None


class CachePolicyHeadersConfig(BaseModel):
    HeaderBehavior: CachePolicyHeaderBehavior
    Headers_1: Optional[Headers] = Field(None, alias='Headers')


class CloudFrontOriginAccessIdentity(BaseModel):
    CloudFrontOriginAccessIdentityConfig_1: Optional[
        CloudFrontOriginAccessIdentityConfig
    ] = Field(None, alias='CloudFrontOriginAccessIdentityConfig')
    Id: String
    S3CanonicalUserId: String


class CloudFrontOriginAccessIdentityList(BaseModel):
    IsTruncated: Boolean
    Items: Optional[CloudFrontOriginAccessIdentitySummaryList] = None
    Marker: String
    MaxItems: Integer
    NextMarker: Optional[String] = None
    Quantity: Integer


class ContentTypeProfileConfig(BaseModel):
    ContentTypeProfiles_1: Optional[ContentTypeProfiles] = Field(
        None, alias='ContentTypeProfiles'
    )
    ForwardWhenContentTypeIsUnknown: Boolean


class ContinuousDeploymentSingleWeightConfig(BaseModel):
    SessionStickinessConfig_1: Optional[SessionStickinessConfig] = Field(
        None, alias='SessionStickinessConfig'
    )
    Weight: Float


class CreateCloudFrontOriginAccessIdentityResult(BaseModel):
    CloudFrontOriginAccessIdentity_1: Optional[CloudFrontOriginAccessIdentity] = Field(
        None, alias='CloudFrontOriginAccessIdentity'
    )


class CreateFunctionRequest(BaseModel):
    FunctionCode: FunctionBlob
    FunctionConfig_1: FunctionConfig = Field(..., alias='FunctionConfig')
    Name: FunctionName


class CreateFunctionResult(BaseModel):
    FunctionSummary_1: Optional[FunctionSummary] = Field(None, alias='FunctionSummary')


class CreateOriginAccessControlRequest(BaseModel):
    OriginAccessControlConfig_1: OriginAccessControlConfig = Field(
        ..., alias='OriginAccessControlConfig'
    )


class CreatePublicKeyRequest(BaseModel):
    PublicKeyConfig_1: PublicKeyConfig = Field(..., alias='PublicKeyConfig')


class CustomHeaders(BaseModel):
    Items: Optional[OriginCustomHeadersList] = None
    Quantity: Integer


class CustomOriginConfig(BaseModel):
    HTTPPort: Integer
    HTTPSPort: Integer
    OriginKeepaliveTimeout: Optional[Integer] = None
    OriginProtocolPolicy_1: OriginProtocolPolicy = Field(
        ..., alias='OriginProtocolPolicy'
    )
    OriginReadTimeout: Optional[Integer] = None
    OriginSslProtocols_1: Optional[OriginSslProtocols] = Field(
        None, alias='OriginSslProtocols'
    )


class DescribeFunctionResult(BaseModel):
    FunctionSummary_1: Optional[FunctionSummary] = Field(None, alias='FunctionSummary')


class DistributionIdList(BaseModel):
    IsTruncated: Boolean
    Items: Optional[DistributionIdListSummary] = None
    Marker: String
    MaxItems: Integer
    NextMarker: Optional[String] = None
    Quantity: Integer


class EncryptionEntity(BaseModel):
    FieldPatterns_1: FieldPatterns = Field(..., alias='FieldPatterns')
    ProviderId: String
    PublicKeyId: String


class EncryptionEntityList(RootModel[List[EncryptionEntity]]):
    root: List[EncryptionEntity]


class EndPoint(BaseModel):
    KinesisStreamConfig_1: Optional[KinesisStreamConfig] = Field(
        None, alias='KinesisStreamConfig'
    )
    StreamType: String


class EndPointList(RootModel[List[EndPoint]]):
    root: List[EndPoint]


class FunctionList(BaseModel):
    Items: Optional[FunctionSummaryList] = None
    MaxItems: Integer
    NextMarker: Optional[String] = None
    Quantity: Integer


class GeoRestriction(BaseModel):
    Items: Optional[LocationList] = None
    Quantity: Integer
    RestrictionType: GeoRestrictionType


class GetCloudFrontOriginAccessIdentityResult(BaseModel):
    CloudFrontOriginAccessIdentity_1: Optional[CloudFrontOriginAccessIdentity] = Field(
        None, alias='CloudFrontOriginAccessIdentity'
    )


class GetOriginAccessControlConfigResult(BaseModel):
    OriginAccessControlConfig_1: Optional[OriginAccessControlConfig] = Field(
        None, alias='OriginAccessControlConfig'
    )


class GetPublicKeyConfigResult(BaseModel):
    PublicKeyConfig_1: Optional[PublicKeyConfig] = Field(None, alias='PublicKeyConfig')


class InvalidationBatch(BaseModel):
    CallerReference: String
    Paths_1: Paths = Field(..., alias='Paths')


class InvalidationList(BaseModel):
    IsTruncated: Boolean
    Items: Optional[InvalidationSummaryList] = None
    Marker: String
    MaxItems: Integer
    NextMarker: Optional[String] = None
    Quantity: Integer


class KGKeyPairIds(BaseModel):
    KeyGroupId: Optional[String] = None
    KeyPairIds_1: Optional[KeyPairIds] = Field(None, alias='KeyPairIds')


class KGKeyPairIdsList(RootModel[List[KGKeyPairIds]]):
    root: List[KGKeyPairIds]


class KeyGroupConfig(BaseModel):
    Comment: Optional[String] = None
    Items: PublicKeyIdList
    Name: String


class ListCloudFrontOriginAccessIdentitiesResult(BaseModel):
    CloudFrontOriginAccessIdentityList_1: Optional[
        CloudFrontOriginAccessIdentityList
    ] = Field(None, alias='CloudFrontOriginAccessIdentityList')


class ListDistributionsByCachePolicyIdResult(BaseModel):
    DistributionIdList_1: Optional[DistributionIdList] = Field(
        None, alias='DistributionIdList'
    )


class ListDistributionsByKeyGroupResult(BaseModel):
    DistributionIdList_1: Optional[DistributionIdList] = Field(
        None, alias='DistributionIdList'
    )


class ListDistributionsByOriginRequestPolicyIdResult(BaseModel):
    DistributionIdList_1: Optional[DistributionIdList] = Field(
        None, alias='DistributionIdList'
    )


class ListDistributionsByResponseHeadersPolicyIdResult(BaseModel):
    DistributionIdList_1: Optional[DistributionIdList] = Field(
        None, alias='DistributionIdList'
    )


class ListFunctionsResult(BaseModel):
    FunctionList_1: Optional[FunctionList] = Field(None, alias='FunctionList')


class ListInvalidationsResult(BaseModel):
    InvalidationList_1: Optional[InvalidationList] = Field(
        None, alias='InvalidationList'
    )


class ListTagsForResourceResult(BaseModel):
    Tags_1: Tags = Field(..., alias='Tags')


class Origin(BaseModel):
    ConnectionAttempts: Optional[Integer] = None
    ConnectionTimeout: Optional[Integer] = None
    CustomHeaders_1: Optional[CustomHeaders] = Field(None, alias='CustomHeaders')
    CustomOriginConfig_1: Optional[CustomOriginConfig] = Field(
        None, alias='CustomOriginConfig'
    )
    DomainName: String
    Id: String
    OriginAccessControlId: Optional[String] = None
    OriginPath: Optional[String] = None
    OriginShield_1: Optional[OriginShield] = Field(None, alias='OriginShield')
    S3OriginConfig_1: Optional[S3OriginConfig] = Field(None, alias='S3OriginConfig')


class OriginAccessControl(BaseModel):
    Id: String
    OriginAccessControlConfig_1: Optional[OriginAccessControlConfig] = Field(
        None, alias='OriginAccessControlConfig'
    )


class OriginAccessControlList(BaseModel):
    IsTruncated: Boolean
    Items: Optional[OriginAccessControlSummaryList] = None
    Marker: String
    MaxItems: Integer
    NextMarker: Optional[String] = None
    Quantity: Integer


class OriginGroupFailoverCriteria(BaseModel):
    StatusCodes_1: StatusCodes = Field(..., alias='StatusCodes')


class OriginList(RootModel[List[Origin]]):
    root: List[Origin] = Field(..., min_length=1)


class Origins(BaseModel):
    Items: OriginList
    Quantity: Integer


class PublicKey(BaseModel):
    CreatedTime: Timestamp
    Id: String
    PublicKeyConfig_1: PublicKeyConfig = Field(..., alias='PublicKeyConfig')


class PublicKeyList(BaseModel):
    Items: Optional[PublicKeySummaryList] = None
    MaxItems: Integer
    NextMarker: Optional[String] = None
    Quantity: Integer


class QueryArgProfileConfig(BaseModel):
    ForwardWhenQueryArgProfileIsUnknown: Boolean
    QueryArgProfiles_1: Optional[QueryArgProfiles] = Field(
        None, alias='QueryArgProfiles'
    )


class QueryStringCacheKeys(BaseModel):
    Items: Optional[QueryStringCacheKeysList] = None
    Quantity: Integer


class QueryStringNames(BaseModel):
    Items: Optional[QueryStringNamesList] = None
    Quantity: Integer


class RealtimeLogConfig(BaseModel):
    ARN: String
    EndPoints: EndPointList
    Fields: FieldList
    Name: String
    SamplingRate: Long


class RealtimeLogConfigList(RootModel[List[RealtimeLogConfig]]):
    root: List[RealtimeLogConfig]


class RealtimeLogConfigs(BaseModel):
    IsTruncated: Boolean
    Items: Optional[RealtimeLogConfigList] = None
    Marker: String
    MaxItems: Integer
    NextMarker: Optional[String] = None


class ResponseHeadersPolicySecurityHeadersConfig(BaseModel):
    ContentSecurityPolicy: Optional[ResponseHeadersPolicyContentSecurityPolicy] = None
    ContentTypeOptions: Optional[ResponseHeadersPolicyContentTypeOptions] = None
    FrameOptions: Optional[ResponseHeadersPolicyFrameOptions] = None
    ReferrerPolicy: Optional[ResponseHeadersPolicyReferrerPolicy] = None
    StrictTransportSecurity: Optional[ResponseHeadersPolicyStrictTransportSecurity] = (
        None
    )
    XSSProtection: Optional[ResponseHeadersPolicyXSSProtection] = None


class Restrictions(BaseModel):
    GeoRestriction_1: GeoRestriction = Field(..., alias='GeoRestriction')


class StreamingDistributionConfig(BaseModel):
    Aliases_1: Optional[Aliases] = Field(None, alias='Aliases')
    CallerReference: String
    Comment: String
    Enabled: Boolean
    Logging: Optional[StreamingLoggingConfig] = None
    PriceClass_1: Optional[PriceClass] = Field(None, alias='PriceClass')
    S3Origin_1: S3Origin = Field(..., alias='S3Origin')
    TrustedSigners_1: TrustedSigners = Field(..., alias='TrustedSigners')


class StreamingDistributionConfigWithTags(BaseModel):
    StreamingDistributionConfig_1: StreamingDistributionConfig = Field(
        ..., alias='StreamingDistributionConfig'
    )
    Tags_1: Tags = Field(..., alias='Tags')


class StreamingDistributionSummary(BaseModel):
    ARN: String
    Aliases_1: Aliases = Field(..., alias='Aliases')
    Comment: String
    DomainName: String
    Enabled: Boolean
    Id: String
    LastModifiedTime: Timestamp
    PriceClass_1: PriceClass = Field(..., alias='PriceClass')
    S3Origin_1: S3Origin = Field(..., alias='S3Origin')
    Status: String
    TrustedSigners_1: TrustedSigners = Field(..., alias='TrustedSigners')


class StreamingDistributionSummaryList(RootModel[List[StreamingDistributionSummary]]):
    root: List[StreamingDistributionSummary]


class TagResourceRequest(BaseModel):
    Tags_1: Tags = Field(..., alias='Tags')


class TestFunctionResult(BaseModel):
    TestResult_1: Optional[TestResult] = Field(None, alias='TestResult')


class TrafficConfig(BaseModel):
    SingleHeaderConfig: Optional[ContinuousDeploymentSingleHeaderConfig] = None
    SingleWeightConfig: Optional[ContinuousDeploymentSingleWeightConfig] = None
    Type: ContinuousDeploymentPolicyType


class UpdateCloudFrontOriginAccessIdentityResult(BaseModel):
    CloudFrontOriginAccessIdentity_1: Optional[CloudFrontOriginAccessIdentity] = Field(
        None, alias='CloudFrontOriginAccessIdentity'
    )


class UpdateKeyGroupRequest(BaseModel):
    KeyGroupConfig_1: KeyGroupConfig = Field(..., alias='KeyGroupConfig')


class UpdateOriginAccessControlResult(BaseModel):
    OriginAccessControl_1: Optional[OriginAccessControl] = Field(
        None, alias='OriginAccessControl'
    )


class UpdatePublicKeyResult(BaseModel):
    PublicKey_1: Optional[PublicKey] = Field(None, alias='PublicKey')


class UpdateRealtimeLogConfigRequest(BaseModel):
    ARN: Optional[String] = None
    EndPoints: Optional[EndPointList] = None
    Fields: Optional[FieldList] = None
    Name: Optional[String] = None
    SamplingRate: Optional[Long] = None


class UpdateRealtimeLogConfigResult(BaseModel):
    RealtimeLogConfig_1: Optional[RealtimeLogConfig] = Field(
        None, alias='RealtimeLogConfig'
    )


class UpdateStreamingDistributionRequest(BaseModel):
    StreamingDistributionConfig_1: StreamingDistributionConfig = Field(
        ..., alias='StreamingDistributionConfig'
    )


class ContinuousDeploymentPolicyConfig1(BaseModel):
    Enabled: Optional[Boolean] = None
    StagingDistributionDnsNames_1: Optional[StagingDistributionDnsNames] = Field(
        None, alias='StagingDistributionDnsNames'
    )
    TrafficConfig_1: Optional[TrafficConfig] = Field(None, alias='TrafficConfig')


class Field20200531ContinuousDeploymentPolicyPostRequest(BaseModel):
    ContinuousDeploymentPolicyConfig: ContinuousDeploymentPolicyConfig1 = Field(
        ...,
        description='Contains the configuration for a continuous deployment policy.',
    )


class Field20200531ContinuousDeploymentPolicyIdPutRequest(BaseModel):
    ContinuousDeploymentPolicyConfig: ContinuousDeploymentPolicyConfig1 = Field(
        ...,
        description='Contains the configuration for a continuous deployment policy.',
    )


class FieldLevelEncryptionConfig1(BaseModel):
    CallerReference: Optional[String] = None
    Comment: Optional[String] = None
    ContentTypeProfileConfig_1: Optional[ContentTypeProfileConfig] = Field(
        None, alias='ContentTypeProfileConfig'
    )
    QueryArgProfileConfig_1: Optional[QueryArgProfileConfig] = Field(
        None, alias='QueryArgProfileConfig'
    )


class Field20200531FieldLevelEncryptionPostRequest(BaseModel):
    FieldLevelEncryptionConfig: FieldLevelEncryptionConfig1 = Field(
        ...,
        description='A complex data type that includes the profile configurations specified for field-level encryption.',
    )


class Field20200531FieldLevelEncryptionIdConfigPutRequest(BaseModel):
    FieldLevelEncryptionConfig: FieldLevelEncryptionConfig1 = Field(
        ...,
        description='A complex data type that includes the profile configurations specified for field-level encryption.',
    )


class Field20200531RealtimeLogConfigPostRequest(BaseModel):
    EndPoints: List[EndPoint] = Field(
        ...,
        description='Contains information about the Amazon Kinesis data stream where you are sending real-time log data.',
    )
    Fields: List[String] = Field(
        ...,
        description='<p>A list of fields to include in each real-time log record.</p> <p>For more information about fields, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-fields">Real-time log configuration fields</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>',
    )
    Name: str = Field(
        ..., description='A unique name to identify this real-time log configuration.'
    )
    SamplingRate: int = Field(
        ...,
        description='The sampling rate for this real-time log configuration. The sampling rate determines the percentage of viewer requests that are represented in the real-time log data. You must provide an integer between 1 and 100, inclusive.',
    )


class Field20200531RealtimeLogConfigPutRequest(BaseModel):
    ARN: Optional[str] = Field(
        None,
        description='The Amazon Resource Name (ARN) for this real-time log configuration.',
    )
    EndPoints: Optional[List[EndPoint]] = Field(
        None,
        description='Contains information about the Amazon Kinesis data stream where you are sending real-time log data.',
    )
    Fields: Optional[List[String]] = Field(
        None,
        description='<p>A list of fields to include in each real-time log record.</p> <p>For more information about fields, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-fields">Real-time log configuration fields</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>',
    )
    Name: Optional[str] = Field(
        None, description='The name for this real-time log configuration.'
    )
    SamplingRate: Optional[int] = Field(
        None,
        description='The sampling rate for this real-time log configuration. The sampling rate determines the percentage of viewer requests that are represented in the real-time log data. You must provide an integer between 1 and 100, inclusive.',
    )


class ResponseHeadersPolicyConfig1(BaseModel):
    Comment: Optional[String] = None
    CorsConfig: Optional[ResponseHeadersPolicyCorsConfig] = None
    CustomHeadersConfig: Optional[ResponseHeadersPolicyCustomHeadersConfig] = None
    Name: Optional[String] = None
    RemoveHeadersConfig: Optional[ResponseHeadersPolicyRemoveHeadersConfig] = None
    SecurityHeadersConfig: Optional[ResponseHeadersPolicySecurityHeadersConfig] = None
    ServerTimingHeadersConfig: Optional[
        ResponseHeadersPolicyServerTimingHeadersConfig
    ] = None


class Field20200531ResponseHeadersPolicyPostRequest(BaseModel):
    ResponseHeadersPolicyConfig: ResponseHeadersPolicyConfig1 = Field(
        ...,
        description='<p>A response headers policy configuration.</p> <p>A response headers policy configuration contains metadata about the response headers policy, and configurations for sets of HTTP response headers.</p>',
    )


class Field20200531ResponseHeadersPolicyIdPutRequest(BaseModel):
    ResponseHeadersPolicyConfig: ResponseHeadersPolicyConfig1 = Field(
        ...,
        description='<p>A response headers policy configuration.</p> <p>A response headers policy configuration contains metadata about the response headers policy, and configurations for sets of HTTP response headers.</p>',
    )


class StreamingDistributionConfigWithTags1(BaseModel):
    StreamingDistributionConfig_1: Optional[StreamingDistributionConfig] = Field(
        None, alias='StreamingDistributionConfig'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class Field20200531StreamingDistributionWithTagsPostRequest(BaseModel):
    StreamingDistributionConfigWithTags: StreamingDistributionConfigWithTags1 = Field(
        ...,
        description='A streaming distribution Configuration and a list of tags to be associated with the streaming distribution.',
    )


class ActiveTrustedKeyGroups(BaseModel):
    Enabled: Boolean
    Items: Optional[KGKeyPairIdsList] = None
    Quantity: Integer


class CachePolicyQueryStringsConfig(BaseModel):
    QueryStringBehavior: CachePolicyQueryStringBehavior
    QueryStrings: Optional[QueryStringNames] = None


class ContinuousDeploymentPolicyConfig(BaseModel):
    Enabled: Boolean
    StagingDistributionDnsNames_1: StagingDistributionDnsNames = Field(
        ..., alias='StagingDistributionDnsNames'
    )
    TrafficConfig_1: Optional[TrafficConfig] = Field(None, alias='TrafficConfig')


class CreateContinuousDeploymentPolicyRequest(BaseModel):
    ContinuousDeploymentPolicyConfig_1: ContinuousDeploymentPolicyConfig = Field(
        ..., alias='ContinuousDeploymentPolicyConfig'
    )


class CreateInvalidationRequest(BaseModel):
    InvalidationBatch_1: InvalidationBatch = Field(..., alias='InvalidationBatch')


class CreateKeyGroupRequest(BaseModel):
    KeyGroupConfig_1: KeyGroupConfig = Field(..., alias='KeyGroupConfig')


class CreateMonitoringSubscriptionRequest(BaseModel):
    MonitoringSubscription_1: MonitoringSubscription = Field(
        ..., alias='MonitoringSubscription'
    )


class CreateMonitoringSubscriptionResult(BaseModel):
    MonitoringSubscription_1: Optional[MonitoringSubscription] = Field(
        None, alias='MonitoringSubscription'
    )


class CreateOriginAccessControlResult(BaseModel):
    OriginAccessControl_1: Optional[OriginAccessControl] = Field(
        None, alias='OriginAccessControl'
    )


class CreatePublicKeyResult(BaseModel):
    PublicKey_1: Optional[PublicKey] = Field(None, alias='PublicKey')


class CreateRealtimeLogConfigRequest(BaseModel):
    EndPoints: EndPointList
    Fields: FieldList
    Name: String
    SamplingRate: Long


class CreateRealtimeLogConfigResult(BaseModel):
    RealtimeLogConfig_1: Optional[RealtimeLogConfig] = Field(
        None, alias='RealtimeLogConfig'
    )


class CreateStreamingDistributionRequest(BaseModel):
    StreamingDistributionConfig_1: StreamingDistributionConfig = Field(
        ..., alias='StreamingDistributionConfig'
    )


class CreateStreamingDistributionWithTagsRequest(BaseModel):
    StreamingDistributionConfigWithTags_1: StreamingDistributionConfigWithTags = Field(
        ..., alias='StreamingDistributionConfigWithTags'
    )


class EncryptionEntities(BaseModel):
    Items: Optional[EncryptionEntityList] = None
    Quantity: Integer


class FieldLevelEncryptionConfig(BaseModel):
    CallerReference: String
    Comment: Optional[String] = None
    ContentTypeProfileConfig_1: Optional[ContentTypeProfileConfig] = Field(
        None, alias='ContentTypeProfileConfig'
    )
    QueryArgProfileConfig_1: Optional[QueryArgProfileConfig] = Field(
        None, alias='QueryArgProfileConfig'
    )


class FieldLevelEncryptionProfileConfig(BaseModel):
    CallerReference: String
    Comment: Optional[String] = None
    EncryptionEntities_1: EncryptionEntities = Field(..., alias='EncryptionEntities')
    Name: String


class FieldLevelEncryptionProfileSummary(BaseModel):
    Comment: Optional[String] = None
    EncryptionEntities_1: EncryptionEntities = Field(..., alias='EncryptionEntities')
    Id: String
    LastModifiedTime: Timestamp
    Name: String


class FieldLevelEncryptionProfileSummaryList(
    RootModel[List[FieldLevelEncryptionProfileSummary]]
):
    root: List[FieldLevelEncryptionProfileSummary]


class FieldLevelEncryptionSummary(BaseModel):
    Comment: Optional[String] = None
    ContentTypeProfileConfig_1: Optional[ContentTypeProfileConfig] = Field(
        None, alias='ContentTypeProfileConfig'
    )
    Id: String
    LastModifiedTime: Timestamp
    QueryArgProfileConfig_1: Optional[QueryArgProfileConfig] = Field(
        None, alias='QueryArgProfileConfig'
    )


class FieldLevelEncryptionSummaryList(RootModel[List[FieldLevelEncryptionSummary]]):
    root: List[FieldLevelEncryptionSummary]


class ForwardedValues(BaseModel):
    Cookies: CookiePreference
    Headers_1: Optional[Headers] = Field(None, alias='Headers')
    QueryString: Boolean
    QueryStringCacheKeys_1: Optional[QueryStringCacheKeys] = Field(
        None, alias='QueryStringCacheKeys'
    )


class GetContinuousDeploymentPolicyConfigResult(BaseModel):
    ContinuousDeploymentPolicyConfig_1: Optional[ContinuousDeploymentPolicyConfig] = (
        Field(None, alias='ContinuousDeploymentPolicyConfig')
    )


class GetFieldLevelEncryptionConfigResult(BaseModel):
    FieldLevelEncryptionConfig_1: Optional[FieldLevelEncryptionConfig] = Field(
        None, alias='FieldLevelEncryptionConfig'
    )


class GetFieldLevelEncryptionProfileConfigResult(BaseModel):
    FieldLevelEncryptionProfileConfig_1: Optional[FieldLevelEncryptionProfileConfig] = (
        Field(None, alias='FieldLevelEncryptionProfileConfig')
    )


class GetKeyGroupConfigResult(BaseModel):
    KeyGroupConfig_1: Optional[KeyGroupConfig] = Field(None, alias='KeyGroupConfig')


class GetMonitoringSubscriptionResult(BaseModel):
    MonitoringSubscription_1: Optional[MonitoringSubscription] = Field(
        None, alias='MonitoringSubscription'
    )


class GetOriginAccessControlResult(BaseModel):
    OriginAccessControl_1: Optional[OriginAccessControl] = Field(
        None, alias='OriginAccessControl'
    )


class GetPublicKeyResult(BaseModel):
    PublicKey_1: Optional[PublicKey] = Field(None, alias='PublicKey')


class GetRealtimeLogConfigResult(BaseModel):
    RealtimeLogConfig_1: Optional[RealtimeLogConfig] = Field(
        None, alias='RealtimeLogConfig'
    )


class GetStreamingDistributionConfigResult(BaseModel):
    StreamingDistributionConfig_1: Optional[StreamingDistributionConfig] = Field(
        None, alias='StreamingDistributionConfig'
    )


class Invalidation(BaseModel):
    CreateTime: Timestamp
    Id: String
    InvalidationBatch_1: InvalidationBatch = Field(..., alias='InvalidationBatch')
    Status: String


class KeyGroup(BaseModel):
    Id: String
    KeyGroupConfig_1: KeyGroupConfig = Field(..., alias='KeyGroupConfig')
    LastModifiedTime: Timestamp


class KeyGroupSummary(BaseModel):
    KeyGroup_1: KeyGroup = Field(..., alias='KeyGroup')


class KeyGroupSummaryList(RootModel[List[KeyGroupSummary]]):
    root: List[KeyGroupSummary]


class ListOriginAccessControlsResult(BaseModel):
    OriginAccessControlList_1: Optional[OriginAccessControlList] = Field(
        None, alias='OriginAccessControlList'
    )


class ListPublicKeysResult(BaseModel):
    PublicKeyList_1: Optional[PublicKeyList] = Field(None, alias='PublicKeyList')


class ListRealtimeLogConfigsResult(BaseModel):
    RealtimeLogConfigs_1: Optional[RealtimeLogConfigs] = Field(
        None, alias='RealtimeLogConfigs'
    )


class OriginGroup(BaseModel):
    FailoverCriteria: OriginGroupFailoverCriteria
    Id: String
    Members: OriginGroupMembers


class OriginGroupList(RootModel[List[OriginGroup]]):
    root: List[OriginGroup] = Field(
        ..., description='List of origin groups for a distribution.'
    )


class OriginGroups(BaseModel):
    Items: Optional[OriginGroupList] = None
    Quantity: Integer


class OriginRequestPolicyQueryStringsConfig(BaseModel):
    QueryStringBehavior: OriginRequestPolicyQueryStringBehavior
    QueryStrings: Optional[QueryStringNames] = None


class ParametersInCacheKeyAndForwardedToOrigin(BaseModel):
    CookiesConfig: CachePolicyCookiesConfig
    EnableAcceptEncodingBrotli: Optional[Boolean] = None
    EnableAcceptEncodingGzip: Boolean
    HeadersConfig: CachePolicyHeadersConfig
    QueryStringsConfig: CachePolicyQueryStringsConfig


class ResponseHeadersPolicyConfig(BaseModel):
    Comment: Optional[String] = None
    CorsConfig: Optional[ResponseHeadersPolicyCorsConfig] = None
    CustomHeadersConfig: Optional[ResponseHeadersPolicyCustomHeadersConfig] = None
    Name: String
    RemoveHeadersConfig: Optional[ResponseHeadersPolicyRemoveHeadersConfig] = None
    SecurityHeadersConfig: Optional[ResponseHeadersPolicySecurityHeadersConfig] = None
    ServerTimingHeadersConfig: Optional[
        ResponseHeadersPolicyServerTimingHeadersConfig
    ] = None


class StreamingDistribution(BaseModel):
    ARN: String
    ActiveTrustedSigners_1: ActiveTrustedSigners = Field(
        ..., alias='ActiveTrustedSigners'
    )
    DomainName: String
    Id: String
    LastModifiedTime: Optional[Timestamp] = None
    Status: String
    StreamingDistributionConfig_1: StreamingDistributionConfig = Field(
        ..., alias='StreamingDistributionConfig'
    )


class StreamingDistributionList(BaseModel):
    IsTruncated: Boolean
    Items: Optional[StreamingDistributionSummaryList] = None
    Marker: String
    MaxItems: Integer
    NextMarker: Optional[String] = None
    Quantity: Integer


class UpdateContinuousDeploymentPolicyRequest(BaseModel):
    ContinuousDeploymentPolicyConfig_1: ContinuousDeploymentPolicyConfig = Field(
        ..., alias='ContinuousDeploymentPolicyConfig'
    )


class UpdateFieldLevelEncryptionConfigRequest(BaseModel):
    FieldLevelEncryptionConfig_1: FieldLevelEncryptionConfig = Field(
        ..., alias='FieldLevelEncryptionConfig'
    )


class UpdateFieldLevelEncryptionProfileRequest(BaseModel):
    FieldLevelEncryptionProfileConfig_1: FieldLevelEncryptionProfileConfig = Field(
        ..., alias='FieldLevelEncryptionProfileConfig'
    )


class UpdateKeyGroupResult(BaseModel):
    KeyGroup_1: Optional[KeyGroup] = Field(None, alias='KeyGroup')


class UpdateResponseHeadersPolicyRequest(BaseModel):
    ResponseHeadersPolicyConfig_1: ResponseHeadersPolicyConfig = Field(
        ..., alias='ResponseHeadersPolicyConfig'
    )


class UpdateStreamingDistributionResult(BaseModel):
    StreamingDistribution_1: Optional[StreamingDistribution] = Field(
        None, alias='StreamingDistribution'
    )


class CachePolicyConfig1(BaseModel):
    Comment: Optional[String] = None
    DefaultTTL: Optional[Long] = None
    MaxTTL: Optional[Long] = None
    MinTTL: Optional[Long] = None
    Name: Optional[String] = None
    ParametersInCacheKeyAndForwardedToOrigin_1: Optional[
        ParametersInCacheKeyAndForwardedToOrigin
    ] = Field(None, alias='ParametersInCacheKeyAndForwardedToOrigin')


class Field20200531CachePolicyPostRequest(BaseModel):
    CachePolicyConfig: CachePolicyConfig1 = Field(
        ...,
        description="<p>A cache policy configuration.</p> <p>This configuration determines the following:</p> <ul> <li> <p>The values that CloudFront includes in the cache key. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer.</p> </li> <li> <p>The default, minimum, and maximum time to live (TTL) values that you want objects to stay in the CloudFront cache.</p> </li> </ul> <p>The headers, cookies, and query strings that are included in the cache key are also included in requests that CloudFront sends to the origin. CloudFront sends a request when it can't find a valid object in its cache that matches the request's cache key. If you want to send values to the origin but <i>not</i> include them in the cache key, use <code>OriginRequestPolicy</code>.</p>",
    )


class Field20200531CachePolicyIdPutRequest(BaseModel):
    CachePolicyConfig: CachePolicyConfig1 = Field(
        ...,
        description="<p>A cache policy configuration.</p> <p>This configuration determines the following:</p> <ul> <li> <p>The values that CloudFront includes in the cache key. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer.</p> </li> <li> <p>The default, minimum, and maximum time to live (TTL) values that you want objects to stay in the CloudFront cache.</p> </li> </ul> <p>The headers, cookies, and query strings that are included in the cache key are also included in requests that CloudFront sends to the origin. CloudFront sends a request when it can't find a valid object in its cache that matches the request's cache key. If you want to send values to the origin but <i>not</i> include them in the cache key, use <code>OriginRequestPolicy</code>.</p>",
    )


class FieldLevelEncryptionProfileConfig1(BaseModel):
    CallerReference: Optional[String] = None
    Comment: Optional[String] = None
    EncryptionEntities_1: Optional[EncryptionEntities] = Field(
        None, alias='EncryptionEntities'
    )
    Name: Optional[String] = None


class Field20200531FieldLevelEncryptionProfilePostRequest(BaseModel):
    FieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig1 = Field(
        ...,
        description='A complex data type of profiles for the field-level encryption.',
    )


class Field20200531FieldLevelEncryptionProfileIdConfigPutRequest(BaseModel):
    FieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig1 = Field(
        ...,
        description='A complex data type of profiles for the field-level encryption.',
    )


class OriginRequestPolicyConfig1(BaseModel):
    Comment: Optional[String] = None
    CookiesConfig: Optional[OriginRequestPolicyCookiesConfig] = None
    HeadersConfig: Optional[OriginRequestPolicyHeadersConfig] = None
    Name: Optional[String] = None
    QueryStringsConfig: Optional[OriginRequestPolicyQueryStringsConfig] = None


class Field20200531OriginRequestPolicyPostRequest(BaseModel):
    OriginRequestPolicyConfig: OriginRequestPolicyConfig1 = Field(
        ...,
        description="<p>An origin request policy configuration.</p> <p>This configuration determines the values that CloudFront includes in requests that it sends to the origin. Each request that CloudFront sends to the origin includes the following:</p> <ul> <li> <p>The request body and the URL path (without the domain name) from the viewer request.</p> </li> <li> <p>The headers that CloudFront automatically includes in every origin request, including <code>Host</code>, <code>User-Agent</code>, and <code>X-Amz-Cf-Id</code>.</p> </li> <li> <p>All HTTP headers, cookies, and URL query strings that are specified in the cache policy or the origin request policy. These can include items from the viewer request and, in the case of headers, additional ones that are added by CloudFront.</p> </li> </ul> <p>CloudFront sends a request when it can't find an object in its cache that matches the request. If you want to send values to the origin and also include them in the cache key, use <code>CachePolicy</code>.</p>",
    )


class Field20200531OriginRequestPolicyIdPutRequest(BaseModel):
    OriginRequestPolicyConfig: OriginRequestPolicyConfig1 = Field(
        ...,
        description="<p>An origin request policy configuration.</p> <p>This configuration determines the values that CloudFront includes in requests that it sends to the origin. Each request that CloudFront sends to the origin includes the following:</p> <ul> <li> <p>The request body and the URL path (without the domain name) from the viewer request.</p> </li> <li> <p>The headers that CloudFront automatically includes in every origin request, including <code>Host</code>, <code>User-Agent</code>, and <code>X-Amz-Cf-Id</code>.</p> </li> <li> <p>All HTTP headers, cookies, and URL query strings that are specified in the cache policy or the origin request policy. These can include items from the viewer request and, in the case of headers, additional ones that are added by CloudFront.</p> </li> </ul> <p>CloudFront sends a request when it can't find an object in its cache that matches the request. If you want to send values to the origin and also include them in the cache key, use <code>CachePolicy</code>.</p>",
    )


class CacheBehavior(BaseModel):
    AllowedMethods_1: Optional[AllowedMethods] = Field(None, alias='AllowedMethods')
    CachePolicyId: Optional[String] = None
    Compress: Optional[Boolean] = None
    DefaultTTL: Optional[Long] = None
    FieldLevelEncryptionId: Optional[String] = None
    ForwardedValues_1: Optional[ForwardedValues] = Field(None, alias='ForwardedValues')
    FunctionAssociations_1: Optional[FunctionAssociations] = Field(
        None, alias='FunctionAssociations'
    )
    LambdaFunctionAssociations_1: Optional[LambdaFunctionAssociations] = Field(
        None, alias='LambdaFunctionAssociations'
    )
    MaxTTL: Optional[Long] = None
    MinTTL: Optional[Long] = None
    OriginRequestPolicyId: Optional[String] = None
    PathPattern: String
    RealtimeLogConfigArn: Optional[String] = None
    ResponseHeadersPolicyId: Optional[String] = None
    SmoothStreaming: Optional[Boolean] = None
    TargetOriginId: String
    TrustedKeyGroups_1: Optional[TrustedKeyGroups] = Field(
        None, alias='TrustedKeyGroups'
    )
    TrustedSigners_1: Optional[TrustedSigners] = Field(None, alias='TrustedSigners')
    ViewerProtocolPolicy_1: ViewerProtocolPolicy = Field(
        ..., alias='ViewerProtocolPolicy'
    )


class CacheBehaviorList(RootModel[List[CacheBehavior]]):
    root: List[CacheBehavior]


class CacheBehaviors(BaseModel):
    Items: Optional[CacheBehaviorList] = None
    Quantity: Integer


class CachePolicyConfig(BaseModel):
    Comment: Optional[String] = None
    DefaultTTL: Optional[Long] = None
    MaxTTL: Optional[Long] = None
    MinTTL: Long
    Name: String
    ParametersInCacheKeyAndForwardedToOrigin_1: Optional[
        ParametersInCacheKeyAndForwardedToOrigin
    ] = Field(None, alias='ParametersInCacheKeyAndForwardedToOrigin')


class ContinuousDeploymentPolicy(BaseModel):
    ContinuousDeploymentPolicyConfig_1: ContinuousDeploymentPolicyConfig = Field(
        ..., alias='ContinuousDeploymentPolicyConfig'
    )
    Id: String
    LastModifiedTime: Timestamp


class ContinuousDeploymentPolicySummary(BaseModel):
    ContinuousDeploymentPolicy_1: ContinuousDeploymentPolicy = Field(
        ..., alias='ContinuousDeploymentPolicy'
    )


class ContinuousDeploymentPolicySummaryList(
    RootModel[List[ContinuousDeploymentPolicySummary]]
):
    root: List[ContinuousDeploymentPolicySummary]


class CreateCachePolicyRequest(BaseModel):
    CachePolicyConfig_1: CachePolicyConfig = Field(..., alias='CachePolicyConfig')


class CreateContinuousDeploymentPolicyResult(BaseModel):
    ContinuousDeploymentPolicy_1: Optional[ContinuousDeploymentPolicy] = Field(
        None, alias='ContinuousDeploymentPolicy'
    )


class CreateFieldLevelEncryptionConfigRequest(BaseModel):
    FieldLevelEncryptionConfig_1: FieldLevelEncryptionConfig = Field(
        ..., alias='FieldLevelEncryptionConfig'
    )


class CreateFieldLevelEncryptionProfileRequest(BaseModel):
    FieldLevelEncryptionProfileConfig_1: FieldLevelEncryptionProfileConfig = Field(
        ..., alias='FieldLevelEncryptionProfileConfig'
    )


class CreateInvalidationResult(BaseModel):
    Invalidation_1: Optional[Invalidation] = Field(None, alias='Invalidation')


class CreateKeyGroupResult(BaseModel):
    KeyGroup_1: Optional[KeyGroup] = Field(None, alias='KeyGroup')


class CreateResponseHeadersPolicyRequest(BaseModel):
    ResponseHeadersPolicyConfig_1: ResponseHeadersPolicyConfig = Field(
        ..., alias='ResponseHeadersPolicyConfig'
    )


class CreateStreamingDistributionResult(BaseModel):
    StreamingDistribution_1: Optional[StreamingDistribution] = Field(
        None, alias='StreamingDistribution'
    )


class CreateStreamingDistributionWithTagsResult(BaseModel):
    StreamingDistribution_1: Optional[StreamingDistribution] = Field(
        None, alias='StreamingDistribution'
    )


class DefaultCacheBehavior(BaseModel):
    AllowedMethods_1: Optional[AllowedMethods] = Field(None, alias='AllowedMethods')
    CachePolicyId: Optional[String] = None
    Compress: Optional[Boolean] = None
    DefaultTTL: Optional[Long] = None
    FieldLevelEncryptionId: Optional[String] = None
    ForwardedValues_1: Optional[ForwardedValues] = Field(None, alias='ForwardedValues')
    FunctionAssociations_1: Optional[FunctionAssociations] = Field(
        None, alias='FunctionAssociations'
    )
    LambdaFunctionAssociations_1: Optional[LambdaFunctionAssociations] = Field(
        None, alias='LambdaFunctionAssociations'
    )
    MaxTTL: Optional[Long] = None
    MinTTL: Optional[Long] = None
    OriginRequestPolicyId: Optional[String] = None
    RealtimeLogConfigArn: Optional[String] = None
    ResponseHeadersPolicyId: Optional[String] = None
    SmoothStreaming: Optional[Boolean] = None
    TargetOriginId: String
    TrustedKeyGroups_1: Optional[TrustedKeyGroups] = Field(
        None, alias='TrustedKeyGroups'
    )
    TrustedSigners_1: Optional[TrustedSigners] = Field(None, alias='TrustedSigners')
    ViewerProtocolPolicy_1: ViewerProtocolPolicy = Field(
        ..., alias='ViewerProtocolPolicy'
    )


class DistributionConfig(BaseModel):
    Aliases_1: Optional[Aliases] = Field(None, alias='Aliases')
    CacheBehaviors_1: Optional[CacheBehaviors] = Field(None, alias='CacheBehaviors')
    CallerReference: String
    Comment: CommentType
    ContinuousDeploymentPolicyId: Optional[String] = None
    CustomErrorResponses_1: Optional[CustomErrorResponses] = Field(
        None, alias='CustomErrorResponses'
    )
    DefaultCacheBehavior_1: DefaultCacheBehavior = Field(
        ..., alias='DefaultCacheBehavior'
    )
    DefaultRootObject: Optional[String] = None
    Enabled: Boolean
    HttpVersion_1: Optional[HttpVersion] = Field(None, alias='HttpVersion')
    IsIPV6Enabled: Optional[Boolean] = None
    Logging: Optional[LoggingConfig] = None
    OriginGroups_1: Optional[OriginGroups] = Field(None, alias='OriginGroups')
    Origins_1: Origins = Field(..., alias='Origins')
    PriceClass_1: Optional[PriceClass] = Field(None, alias='PriceClass')
    Restrictions_1: Optional[Restrictions] = Field(None, alias='Restrictions')
    Staging: Optional[Boolean] = None
    ViewerCertificate_1: Optional[ViewerCertificate] = Field(
        None, alias='ViewerCertificate'
    )
    WebACLId: Optional[String] = None


class DistributionConfigWithTags(BaseModel):
    DistributionConfig_1: DistributionConfig = Field(..., alias='DistributionConfig')
    Tags_1: Tags = Field(..., alias='Tags')


class DistributionSummary(BaseModel):
    ARN: String
    AliasICPRecordals_1: Optional[AliasICPRecordals] = Field(
        None, alias='AliasICPRecordals'
    )
    Aliases_1: Aliases = Field(..., alias='Aliases')
    CacheBehaviors_1: CacheBehaviors = Field(..., alias='CacheBehaviors')
    Comment: String
    CustomErrorResponses_1: CustomErrorResponses = Field(
        ..., alias='CustomErrorResponses'
    )
    DefaultCacheBehavior_1: DefaultCacheBehavior = Field(
        ..., alias='DefaultCacheBehavior'
    )
    DomainName: String
    Enabled: Boolean
    HttpVersion_1: HttpVersion = Field(..., alias='HttpVersion')
    Id: String
    IsIPV6Enabled: Boolean
    LastModifiedTime: Timestamp
    OriginGroups_1: Optional[OriginGroups] = Field(None, alias='OriginGroups')
    Origins_1: Origins = Field(..., alias='Origins')
    PriceClass_1: PriceClass = Field(..., alias='PriceClass')
    Restrictions_1: Restrictions = Field(..., alias='Restrictions')
    Staging: Boolean
    Status: String
    ViewerCertificate_1: ViewerCertificate = Field(..., alias='ViewerCertificate')
    WebACLId: String


class DistributionSummaryList(RootModel[List[DistributionSummary]]):
    root: List[DistributionSummary]


class FieldLevelEncryption(BaseModel):
    FieldLevelEncryptionConfig_1: FieldLevelEncryptionConfig = Field(
        ..., alias='FieldLevelEncryptionConfig'
    )
    Id: String
    LastModifiedTime: Timestamp


class FieldLevelEncryptionList(BaseModel):
    Items: Optional[FieldLevelEncryptionSummaryList] = None
    MaxItems: Integer
    NextMarker: Optional[String] = None
    Quantity: Integer


class FieldLevelEncryptionProfile(BaseModel):
    FieldLevelEncryptionProfileConfig_1: FieldLevelEncryptionProfileConfig = Field(
        ..., alias='FieldLevelEncryptionProfileConfig'
    )
    Id: String
    LastModifiedTime: Timestamp


class FieldLevelEncryptionProfileList(BaseModel):
    Items: Optional[FieldLevelEncryptionProfileSummaryList] = None
    MaxItems: Integer
    NextMarker: Optional[String] = None
    Quantity: Integer


class GetCachePolicyConfigResult(BaseModel):
    CachePolicyConfig_1: Optional[CachePolicyConfig] = Field(
        None, alias='CachePolicyConfig'
    )


class GetContinuousDeploymentPolicyResult(BaseModel):
    ContinuousDeploymentPolicy_1: Optional[ContinuousDeploymentPolicy] = Field(
        None, alias='ContinuousDeploymentPolicy'
    )


class GetDistributionConfigResult(BaseModel):
    DistributionConfig_1: Optional[DistributionConfig] = Field(
        None, alias='DistributionConfig'
    )


class GetFieldLevelEncryptionProfileResult(BaseModel):
    FieldLevelEncryptionProfile_1: Optional[FieldLevelEncryptionProfile] = Field(
        None, alias='FieldLevelEncryptionProfile'
    )


class GetFieldLevelEncryptionResult(BaseModel):
    FieldLevelEncryption_1: Optional[FieldLevelEncryption] = Field(
        None, alias='FieldLevelEncryption'
    )


class GetInvalidationResult(BaseModel):
    Invalidation_1: Optional[Invalidation] = Field(None, alias='Invalidation')


class GetKeyGroupResult(BaseModel):
    KeyGroup_1: Optional[KeyGroup] = Field(None, alias='KeyGroup')


class GetResponseHeadersPolicyConfigResult(BaseModel):
    ResponseHeadersPolicyConfig_1: Optional[ResponseHeadersPolicyConfig] = Field(
        None, alias='ResponseHeadersPolicyConfig'
    )


class GetStreamingDistributionResult(BaseModel):
    StreamingDistribution_1: Optional[StreamingDistribution] = Field(
        None, alias='StreamingDistribution'
    )


class KeyGroupList(BaseModel):
    Items: Optional[KeyGroupSummaryList] = None
    MaxItems: Integer
    NextMarker: Optional[String] = None
    Quantity: Integer


class ListFieldLevelEncryptionConfigsResult(BaseModel):
    FieldLevelEncryptionList_1: Optional[FieldLevelEncryptionList] = Field(
        None, alias='FieldLevelEncryptionList'
    )


class ListFieldLevelEncryptionProfilesResult(BaseModel):
    FieldLevelEncryptionProfileList_1: Optional[FieldLevelEncryptionProfileList] = (
        Field(None, alias='FieldLevelEncryptionProfileList')
    )


class ListKeyGroupsResult(BaseModel):
    KeyGroupList_1: Optional[KeyGroupList] = Field(None, alias='KeyGroupList')


class ListStreamingDistributionsResult(BaseModel):
    StreamingDistributionList_1: Optional[StreamingDistributionList] = Field(
        None, alias='StreamingDistributionList'
    )


class OriginRequestPolicyConfig(BaseModel):
    Comment: Optional[String] = None
    CookiesConfig: OriginRequestPolicyCookiesConfig
    HeadersConfig: OriginRequestPolicyHeadersConfig
    Name: String
    QueryStringsConfig: OriginRequestPolicyQueryStringsConfig


class ResponseHeadersPolicy(BaseModel):
    Id: String
    LastModifiedTime: Timestamp
    ResponseHeadersPolicyConfig_1: ResponseHeadersPolicyConfig = Field(
        ..., alias='ResponseHeadersPolicyConfig'
    )


class ResponseHeadersPolicySummary(BaseModel):
    ResponseHeadersPolicy_1: ResponseHeadersPolicy = Field(
        ..., alias='ResponseHeadersPolicy'
    )
    Type: ResponseHeadersPolicyType


class ResponseHeadersPolicySummaryList(RootModel[List[ResponseHeadersPolicySummary]]):
    root: List[ResponseHeadersPolicySummary]


class UpdateCachePolicyRequest(BaseModel):
    CachePolicyConfig_1: CachePolicyConfig = Field(..., alias='CachePolicyConfig')


class UpdateContinuousDeploymentPolicyResult(BaseModel):
    ContinuousDeploymentPolicy_1: Optional[ContinuousDeploymentPolicy] = Field(
        None, alias='ContinuousDeploymentPolicy'
    )


class UpdateDistributionRequest(BaseModel):
    DistributionConfig_1: DistributionConfig = Field(..., alias='DistributionConfig')


class UpdateFieldLevelEncryptionConfigResult(BaseModel):
    FieldLevelEncryption_1: Optional[FieldLevelEncryption] = Field(
        None, alias='FieldLevelEncryption'
    )


class UpdateFieldLevelEncryptionProfileResult(BaseModel):
    FieldLevelEncryptionProfile_1: Optional[FieldLevelEncryptionProfile] = Field(
        None, alias='FieldLevelEncryptionProfile'
    )


class UpdateOriginRequestPolicyRequest(BaseModel):
    OriginRequestPolicyConfig_1: OriginRequestPolicyConfig = Field(
        ..., alias='OriginRequestPolicyConfig'
    )


class UpdateResponseHeadersPolicyResult(BaseModel):
    ResponseHeadersPolicy_1: Optional[ResponseHeadersPolicy] = Field(
        None, alias='ResponseHeadersPolicy'
    )


class DistributionConfig1(BaseModel):
    Aliases_1: Optional[Aliases] = Field(None, alias='Aliases')
    CacheBehaviors_1: Optional[CacheBehaviors] = Field(None, alias='CacheBehaviors')
    CallerReference: Optional[String] = None
    Comment: Optional[CommentType] = None
    ContinuousDeploymentPolicyId: Optional[String] = None
    CustomErrorResponses_1: Optional[CustomErrorResponses] = Field(
        None, alias='CustomErrorResponses'
    )
    DefaultCacheBehavior_1: Optional[DefaultCacheBehavior] = Field(
        None, alias='DefaultCacheBehavior'
    )
    DefaultRootObject: Optional[String] = None
    Enabled: Optional[Boolean] = None
    HttpVersion_1: Optional[HttpVersion] = Field(None, alias='HttpVersion')
    IsIPV6Enabled: Optional[Boolean] = None
    Logging: Optional[LoggingConfig] = None
    OriginGroups_1: Optional[OriginGroups] = Field(None, alias='OriginGroups')
    Origins_1: Optional[Origins] = Field(None, alias='Origins')
    PriceClass_1: Optional[PriceClass] = Field(None, alias='PriceClass')
    Restrictions_1: Optional[Restrictions] = Field(None, alias='Restrictions')
    Staging: Optional[Boolean] = None
    ViewerCertificate_1: Optional[ViewerCertificate] = Field(
        None, alias='ViewerCertificate'
    )
    WebACLId: Optional[String] = None


class Field20200531DistributionPostRequest(BaseModel):
    DistributionConfig: DistributionConfig1 = Field(
        ..., description='A distribution configuration.'
    )


class DistributionConfigWithTags1(BaseModel):
    DistributionConfig_1: Optional[DistributionConfig] = Field(
        None, alias='DistributionConfig'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class Field20200531DistributionWithTagsPostRequest(BaseModel):
    DistributionConfigWithTags: DistributionConfigWithTags1 = Field(
        ...,
        description='A distribution Configuration and a list of tags to be associated with the distribution.',
    )


class Field20200531DistributionIdConfigPutRequest(BaseModel):
    DistributionConfig: DistributionConfig1 = Field(
        ..., description='A distribution configuration.'
    )


class CachePolicy(BaseModel):
    CachePolicyConfig_1: CachePolicyConfig = Field(..., alias='CachePolicyConfig')
    Id: String
    LastModifiedTime: Timestamp


class CachePolicySummary(BaseModel):
    CachePolicy_1: CachePolicy = Field(..., alias='CachePolicy')
    Type: CachePolicyType


class CachePolicySummaryList(RootModel[List[CachePolicySummary]]):
    root: List[CachePolicySummary]


class ContinuousDeploymentPolicyList(BaseModel):
    Items: Optional[ContinuousDeploymentPolicySummaryList] = None
    MaxItems: Integer
    NextMarker: Optional[String] = None
    Quantity: Integer


class CreateCachePolicyResult(BaseModel):
    CachePolicy_1: Optional[CachePolicy] = Field(None, alias='CachePolicy')


class CreateDistributionRequest(BaseModel):
    DistributionConfig_1: DistributionConfig = Field(..., alias='DistributionConfig')


class CreateDistributionWithTagsRequest(BaseModel):
    DistributionConfigWithTags_1: DistributionConfigWithTags = Field(
        ..., alias='DistributionConfigWithTags'
    )


class CreateFieldLevelEncryptionConfigResult(BaseModel):
    FieldLevelEncryption_1: Optional[FieldLevelEncryption] = Field(
        None, alias='FieldLevelEncryption'
    )


class CreateFieldLevelEncryptionProfileResult(BaseModel):
    FieldLevelEncryptionProfile_1: Optional[FieldLevelEncryptionProfile] = Field(
        None, alias='FieldLevelEncryptionProfile'
    )


class CreateOriginRequestPolicyRequest(BaseModel):
    OriginRequestPolicyConfig_1: OriginRequestPolicyConfig = Field(
        ..., alias='OriginRequestPolicyConfig'
    )


class CreateResponseHeadersPolicyResult(BaseModel):
    ResponseHeadersPolicy_1: Optional[ResponseHeadersPolicy] = Field(
        None, alias='ResponseHeadersPolicy'
    )


class Distribution(BaseModel):
    ARN: String
    ActiveTrustedKeyGroups_1: Optional[ActiveTrustedKeyGroups] = Field(
        None, alias='ActiveTrustedKeyGroups'
    )
    ActiveTrustedSigners_1: Optional[ActiveTrustedSigners] = Field(
        None, alias='ActiveTrustedSigners'
    )
    AliasICPRecordals_1: Optional[AliasICPRecordals] = Field(
        None, alias='AliasICPRecordals'
    )
    DistributionConfig_1: DistributionConfig = Field(..., alias='DistributionConfig')
    DomainName: String
    Id: String
    InProgressInvalidationBatches: Integer
    LastModifiedTime: Timestamp
    Status: String


class DistributionList(BaseModel):
    IsTruncated: Boolean
    Items: Optional[DistributionSummaryList] = None
    Marker: String
    MaxItems: Integer
    NextMarker: Optional[String] = None
    Quantity: Integer


class GetCachePolicyResult(BaseModel):
    CachePolicy_1: Optional[CachePolicy] = Field(None, alias='CachePolicy')


class GetDistributionResult(BaseModel):
    Distribution_1: Optional[Distribution] = Field(None, alias='Distribution')


class GetOriginRequestPolicyConfigResult(BaseModel):
    OriginRequestPolicyConfig_1: Optional[OriginRequestPolicyConfig] = Field(
        None, alias='OriginRequestPolicyConfig'
    )


class GetResponseHeadersPolicyResult(BaseModel):
    ResponseHeadersPolicy_1: Optional[ResponseHeadersPolicy] = Field(
        None, alias='ResponseHeadersPolicy'
    )


class ListContinuousDeploymentPoliciesResult(BaseModel):
    ContinuousDeploymentPolicyList_1: Optional[ContinuousDeploymentPolicyList] = Field(
        None, alias='ContinuousDeploymentPolicyList'
    )


class ListDistributionsByRealtimeLogConfigResult(BaseModel):
    DistributionList_1: Optional[DistributionList] = Field(
        None, alias='DistributionList'
    )


class ListDistributionsByWebACLIdResult(BaseModel):
    DistributionList_1: Optional[DistributionList] = Field(
        None, alias='DistributionList'
    )


class ListDistributionsResult(BaseModel):
    DistributionList_1: Optional[DistributionList] = Field(
        None, alias='DistributionList'
    )


class OriginRequestPolicy(BaseModel):
    Id: String
    LastModifiedTime: Timestamp
    OriginRequestPolicyConfig_1: OriginRequestPolicyConfig = Field(
        ..., alias='OriginRequestPolicyConfig'
    )


class OriginRequestPolicySummary(BaseModel):
    OriginRequestPolicy_1: OriginRequestPolicy = Field(..., alias='OriginRequestPolicy')
    Type: OriginRequestPolicyType


class OriginRequestPolicySummaryList(RootModel[List[OriginRequestPolicySummary]]):
    root: List[OriginRequestPolicySummary]


class ResponseHeadersPolicyList(BaseModel):
    Items: Optional[ResponseHeadersPolicySummaryList] = None
    MaxItems: Integer
    NextMarker: Optional[String] = None
    Quantity: Integer


class UpdateCachePolicyResult(BaseModel):
    CachePolicy_1: Optional[CachePolicy] = Field(None, alias='CachePolicy')


class UpdateDistributionResult(BaseModel):
    Distribution_1: Optional[Distribution] = Field(None, alias='Distribution')


class UpdateDistributionWithStagingConfigResult(BaseModel):
    Distribution_1: Optional[Distribution] = Field(None, alias='Distribution')


class UpdateOriginRequestPolicyResult(BaseModel):
    OriginRequestPolicy_1: Optional[OriginRequestPolicy] = Field(
        None, alias='OriginRequestPolicy'
    )


class CachePolicyList(BaseModel):
    Items: Optional[CachePolicySummaryList] = None
    MaxItems: Integer
    NextMarker: Optional[String] = None
    Quantity: Integer


class CopyDistributionResult(BaseModel):
    Distribution_1: Optional[Distribution] = Field(None, alias='Distribution')


class CreateDistributionResult(BaseModel):
    Distribution_1: Optional[Distribution] = Field(None, alias='Distribution')


class CreateDistributionWithTagsResult(BaseModel):
    Distribution_1: Optional[Distribution] = Field(None, alias='Distribution')


class CreateOriginRequestPolicyResult(BaseModel):
    OriginRequestPolicy_1: Optional[OriginRequestPolicy] = Field(
        None, alias='OriginRequestPolicy'
    )


class GetOriginRequestPolicyResult(BaseModel):
    OriginRequestPolicy_1: Optional[OriginRequestPolicy] = Field(
        None, alias='OriginRequestPolicy'
    )


class ListCachePoliciesResult(BaseModel):
    CachePolicyList_1: Optional[CachePolicyList] = Field(None, alias='CachePolicyList')


class ListResponseHeadersPoliciesResult(BaseModel):
    ResponseHeadersPolicyList_1: Optional[ResponseHeadersPolicyList] = Field(
        None, alias='ResponseHeadersPolicyList'
    )


class OriginRequestPolicyList(BaseModel):
    Items: Optional[OriginRequestPolicySummaryList] = None
    MaxItems: Integer
    NextMarker: Optional[String] = None
    Quantity: Integer


class ListOriginRequestPoliciesResult(BaseModel):
    OriginRequestPolicyList_1: Optional[OriginRequestPolicyList] = Field(
        None, alias='OriginRequestPolicyList'
    )
